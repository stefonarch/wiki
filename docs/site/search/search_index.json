{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#welcome-to-the-lxqt-wiki","title":"Welcome to the LXQt wiki","text":"<p>This is the wiki of the LXQt project</p>"},{"location":"#introduction","title":"Introduction","text":"<p>LXQt is a free and open source lightweight desktop environment.</p>"},{"location":"#installation","title":"Installation","text":"<ul> <li>Precompiled binary packages are provided by all major Linux and BSD distributions.  </li> <li>Instructions on how to compile from the sources.  </li> </ul>"},{"location":"#configuration","title":"Configuration","text":"<ul> <li>The concepts of the configuration.  </li> </ul>"},{"location":"#development","title":"Development","text":"<ul> <li>Contribute code.</li> <li>Report bugs</li> <li>Contribute to translation.</li> </ul>"},{"location":"Binary-packages/","title":"Binary packages","text":"<p>Pre-compiled binary packages are provided by all major Linux and BSD distributions.   </p> <p>Basic knowledge of the respective package management tools is required and not within the scope of this wiki. Please refer to the documentation of the distribution you're using.   </p> <p>For a list of LXQt versions on various distributions, please check https://repology.org/project/lxqt-session/versions.</p> <p>If your distribution has an older package version, please do not report bugs on Github, but rather on their respective bug trackers. If you want the latest LXQt on such a distribution you can build it using the instructions here.</p>"},{"location":"Binary-packages/#arch-linux","title":"Arch Linux","text":"<p>The stable release is available in community repo, packages' names are the same as upstream. A group <code>lxqt</code> exists and pulls all relevant ones.</p> <p>Latest VCS code is provided in the AUR, packages' names are the same as upstream suffixed by <code>-git</code>.</p>"},{"location":"Binary-packages/#manjaro-endeavouros-cachyos","title":"Manjaro, EndeavourOs, CachyOs","text":"<p>Nearly identical as Arch Linux.</p>"},{"location":"Binary-packages/#debian-derivatives","title":"Debian, Derivatives","text":""},{"location":"Binary-packages/#debian","title":"Debian","text":"<p>LXQt is available in Debian's official repositories (LXQt 1.2.0 in Debian 12 \"bookworm\" and LXQt 2.1.x in Debian 13 \"Trixie\"). There are metapackages <code>lxqt-core</code> providing core features and <code>lxqt</code> providing LXQt as a whole plus some additional applications. See https://github.com/lxqt/lxqt/discussions/2712 for LXQt 2.2 in Debian Trixie. </p>"},{"location":"Binary-packages/#ubuntu-derivatives","title":"Ubuntu, Derivatives","text":""},{"location":"Binary-packages/#official-repositories","title":"Official repositories","text":"<p>LXQt is available in the official repositories as of Ubuntu 18.04 \"Bionic Beaver\" and later. The metapackages are the same as in Debian.   </p>"},{"location":"Binary-packages/#ppas","title":"PPAs","text":"<p>A ppa with LXQt 1.4.x packages for Ubuntu \"Jammy Jellyfish\" 22.04 LTS and 24.04 \"Noble Numbat\" is available,</p>"},{"location":"Binary-packages/#fedora","title":"Fedora","text":"<p>LXQt is included in the official repositories. A corresponding group \"lxqt\" is available as well as a spin: https://fedoraproject.org/spins/lxqt .</p>"},{"location":"Binary-packages/#freebsd","title":"FreeBSD","text":"<p>LXQt is available in the official repositories. You can find information about installing here.</p>"},{"location":"Binary-packages/#gentoo","title":"Gentoo","text":"<p>LXQt stable releases are made available via the official Gentoo repository.  You can find information about installing here.</p> <p>Additionally, \"live ebuilds\" using git commits can be found from the Qt overlay.</p>"},{"location":"Binary-packages/#mageia","title":"Mageia","text":"<p>A meta-package to install LXQt on Mageia's latest release can be found here.    </p>"},{"location":"Binary-packages/#opensuse","title":"openSUSE","text":"<p>Stable versions are maintained in <code>X11:LXQt</code> and included in openSUSE Leap and Tumbleweed. LXQt can be installed via the LXQt pattern: <code>zypper in -t pattern lxqt</code>, or via clicking on the pattern in YaST Software or by installing every component individually. More information can be found in the openSUSE Wiki.  Git snapshots are available in <code>X11:LXQt:git</code>.   </p>"},{"location":"Building-from-source/","title":"Building from Source","text":""},{"location":"Building-from-source/#introduction","title":"Introduction","text":"<p>While using precompiled binary packages will be appropriate most of the time compiling from sources may very well make sense, too, e. g. to run latest development versions if these aren't available on a particular operating system. So here's a guide how to achieve this.</p> <p>If running latest development snapshots is your intent please note that these can be compiled in a very convenient way on Arch Linux using its AUR and that corresponding repositories exist in Debian and openSUSE as well, see [[Binary packages|Binary-packages]].   </p> <p>We'll try to be verbose yet basic knowledge about working on the shell, package management and how to compile using CMake and GNU make is needed.   The descriptions stated below should work on any operating system of the *ix ecosystem, that is on all current Linux distributions as well as on BSD. For now distinct packages of Arch Linux, Debian / Ubuntu, Fedora and openSUSE are stated only. Additional distributions may be added.</p> <p>As for Debian to build the release 1.4.x Debian version 12 (\"bookworm\") is mandatory while to build version 2.0 and higher Debian 13 is needed.</p>"},{"location":"Building-from-source/#prerequisites","title":"Prerequisites","text":"<p>Before compiling it is strongly recommended to remove any preexisting LXQt and associated components which were installed other than according to this guide (updating by following the guide once more hasn't been thoroughly tested yet but should work without issues).   </p> <p>Next we need to install the dependencies to compile LXQt. These are the build environment as well as the various components needed by the software we are going to compile.   </p>"},{"location":"Building-from-source/#build-environment","title":"Build environment","text":"<p>A CMake version \u2265 3.1.8 is required, see documentation of your distribution.   </p>"},{"location":"Building-from-source/#arch-linux","title":"Arch Linux","text":"<pre><code>pacman --needed -S base-devel cmake git pkgconf\n</code></pre>"},{"location":"Building-from-source/#debian-derivatives","title":"Debian, Derivatives","text":"<pre><code>apt install build-essential cmake git\n</code></pre>"},{"location":"Building-from-source/#fedora","title":"Fedora","text":"<pre><code>dnf group install c-development\ndnf install cmake git\n</code></pre>"},{"location":"Building-from-source/#opensuse","title":"openSUSE","text":"<pre><code>zypper install -t pattern devel_basis\nzypper install cmake git\n</code></pre>"},{"location":"Building-from-source/#qt","title":"Qt","text":"<p>Qt version \u22656.6 is required now. Compiling Qt from its sources isn't exactly a trivial task and not within the scope of this document.  So if you need to compile Qt you may want to look into the various sources addressing this topic (and optionally tell us about your experience).   </p>"},{"location":"Building-from-source/#arch-linux_1","title":"Arch Linux","text":"<pre><code>pacman --needed -S qt6-base qt6-svg qt6-tools \n</code></pre>"},{"location":"Building-from-source/#debian-derivatives_1","title":"Debian, Derivatives","text":"<pre><code>apt install qt6-base-private-dev libqt6svg6-dev qt6-tools-dev qt6-tools-dev-tools libpolkit-qt6-1-dev qt6-wayland-private-dev\n</code></pre>"},{"location":"Building-from-source/#fedora_1","title":"Fedora","text":"<pre><code>dnf install qt6-qtbase-devel qt6-qtsvg-devel qt6-qttools-devel\n</code></pre>"},{"location":"Building-from-source/#opensuse_1","title":"openSUSE","text":"<pre><code>zypper install libqt6-qtbase-private-headers-devel libqt6-qtsvg-devel libqt6-qttools-devel qt6-waylandclient-private-devel\n</code></pre>"},{"location":"Building-from-source/#qt-extensions-developed-by-kde-team-frameworks-kscreen-layer-shell-qt","title":"Qt extensions developed by KDE team (Frameworks, KScreen, Layer-shell-qt)","text":""},{"location":"Building-from-source/#arch-linux_2","title":"Arch Linux","text":"<pre><code>pacman --needed -S kguiaddons libkscreen kidletime kwindowsystem solid layer-shell-qt\n</code></pre>"},{"location":"Building-from-source/#debian-derivatives_2","title":"Debian, Derivatives","text":"<pre><code>apt-get install libkf6guiaddons-dev libkf6idletime-dev libkf6screen-dev libkf6windowsystem-dev libkf6solid-dev liblayershellqtinterface-dev\n</code></pre>"},{"location":"Building-from-source/#fedora_2","title":"Fedora","text":"<pre><code>dnf install kf6-kguiaddons-devel libkscreen-qt6-devel kf6-kidletime-devel kf6-kwindowsystem-devel kf6-solid-devel layer-shell-qt-devel\n</code></pre>"},{"location":"Building-from-source/#opensuse_2","title":"openSUSE","text":"<pre><code>zypper install kguiaddons-devel libkscreen2-devel kidletime-devel kwindowsystem-devel solid-devel layer-shell-qt\n</code></pre>"},{"location":"Building-from-source/#miscellaneous","title":"Miscellaneous","text":""},{"location":"Building-from-source/#arch-linux_3","title":"Arch Linux","text":"<pre><code>pacman --needed -S bash libstatgrab alsa-lib libpulse lm_sensors libconfig muparser upower polkit-qt6 sudo xorg-xmessage libxss libxcursor libxcomposite libxcb libxkbcommon-x11  libfm menu-cache gtk-update-icon-cache hicolor-icon-theme xdg-utils xdg-user-dirs oxygen-icons openbox libxslt\n</code></pre>"},{"location":"Building-from-source/#debian-derivatives-ubuntu-see-below","title":"Debian, Derivatives (Ubuntu see below)","text":"<pre><code>apt install bash gtk-update-icon-cache hicolor-icon-theme libasound2-dev libconfig-dev libdbusmenu-qt5-dev libexif-dev libfm-dev libjson-glib-dev libmenu-cache-dev libmuparser-dev libpolkit-agent-1-dev  libpulse-dev libsensors-dev libstatgrab-dev libudev-dev libupower-glib-dev libx11-xcb-dev libxcb-composite0-dev libxcb-damage0-dev libxcb-dpms0-dev libxcb-image0-dev libxcb-randr0-dev libxcb-screensaver0-dev libxcb-util0-dev libxcomposite-dev libxcursor-dev libxdamage-dev libxi-dev libxkbcommon-x11-dev libxss-dev libxtst-dev openbox-dev oxygen-icon-theme sudo x11-utils xdg-user-dirs xdg-utils xserver-xorg-input-libinput-dev libproc2-dev\n</code></pre>"},{"location":"Building-from-source/#ubuntu","title":"Ubuntu","text":"<p>Same as Debian but replace <code>gtk-update-icon-cache</code> with <code>libgtk2.0-bin</code>.</p>"},{"location":"Building-from-source/#fedora_3","title":"Fedora","text":"<pre><code>dnf install systemd-devel bash libstatgrab-devel alsa-lib-devel pulseaudio-libs-devel lm_sensors-devel libconfig-devel muParser-devel upower-devel polkit-devel polkit-qt5-1-devel sudo libexif-devel xorg-x11-apps libSM-devel libXScrnSaver-devel libXcursor-devel libXcomposite-devel libxcb-devel xcb-util-devel libxkbcommon-x11-devel dbusmenu-qt5-devel libfm-devel menu-cache-devel gtk-update-icon-cache hicolor-icon-theme xdg-utils xdg-user-dirs oxygen-icon-theme openbox openbox-devel libxslt-devel\n</code></pre>"},{"location":"Building-from-source/#opensuse_3","title":"openSUSE","text":"<pre><code>zypper install bash libstatgrab-devel alsa-devel libpulse-devel libsensors4-devel libconfig-devel muparser-devel libupower-glib-devel libpolkit-qt6-1-devel sudo libexif-devel xmessage libXss-devel libXcursor-devel libXcomposite-devel libxcb-devel xcb-util-devel libxkbcommon-x11-devel  libfm-devel menu-cache-devel gtk3-tools hicolor-icon-theme xdg-utils xdg-user-dirs oxygen6-icon-theme openbox-devel libxslt-devel\n</code></pre>"},{"location":"Building-from-source/#compiling","title":"Compiling","text":""},{"location":"Building-from-source/#generalbuild-order","title":"General/Build Order","text":"<p>In order to meet all mutual dependencies the various components have to be compiled in a particular order which is summed up below.</p>"},{"location":"Building-from-source/#0-2-packages","title":"0 (2 packages)","text":"<ul> <li>lxqt-build-tools</li> <li>libdbusmenu-lxqt</li> </ul>"},{"location":"Building-from-source/#i-2-packages","title":"I (2 packages)","text":"<ul> <li>libqtxdg</li> <li>lxqt-menu-data</li> </ul>"},{"location":"Building-from-source/#ii-4-packages","title":"II (4 packages)","text":"<ul> <li>liblxqt</li> <li>libsysstat</li> <li>qtxdg-tools</li> <li>libfm-qt</li> </ul>"},{"location":"Building-from-source/#iii-4-packages","title":"III (4 packages)","text":"<ul> <li>lxqt-globalkeys</li> <li>lxqt-qtplugin</li> <li>lxqt-session</li> <li>qtermwidget</li> </ul>"},{"location":"Building-from-source/#iv-all-remaining-packages-in-any-order","title":"IV - All remaining packages in any order","text":"<ul> <li>lxqt-panel</li> <li>pcmanfm-qt</li> <li>qterminal</li> <li>lxqt-powermanagement</li> <li>lxqt-runner</li> <li>lxqt-themes</li> <li>lxqt-admin</li> <li>lxqt-notificationd</li> <li>lxqt-about</li> <li>lxqt-config</li> <li>lxqt-policykit</li> <li>lxqt-sudo</li> <li>lxqt-openssh-askpass</li> <li>lxqt-wayland-session</li> <li>pavucontrol-qt</li> <li>xdg-desktop-portal-lxqt</li> <li>lxqt-archiver</li> <li>screengrab</li> <li>lximage-qt</li> <li>qps</li> <li>obconf-qt</li> </ul> <p>These groups must be processed in this order but the order of components within the each group does not matter.     </p> <p>All components are compiled using CMake and GNU make.  It is strongly advised to do the builds out of source tree.  At least on some operating systems like Arch Linux and Debian LXQt doesn't seem to start when CMake variable <code>CMAKE_INSTALL_PREFIX</code> which is explained below is not set to <code>/usr</code> which is something we may have to investigate. On the other hand this assignment will hardly ever do harm so it should be safe to recommend setting <code>/usr</code> in general for now.   </p>"},{"location":"Building-from-source/#compiling-all-components-individually","title":"Compiling all components individually","text":"<p>The repositories of all components maintained by the LXQt project as well as nearly all others stated above come with a file <code>README.md</code> providing information how to install the respective component.  This information applies to compiling the archive files of regular releases as well.  The names of all components in the synopsis above are links to those repositories you may just follow.   </p> <p>The general approach is something like</p> <pre><code>mkdir build\ncd build\ncmake &lt;path to sources&gt; -DCMAKE_INSTALL_PREFIX=/usr\nmake\nmake install\n</code></pre> <p>Directory <code>build</code> should be outside the directory of the sources. <code>cmake</code> and <code>make</code> can and should be run by regular users, <code>make install</code> requires root privileges in order to write to the FHS. These can be acquired by <code>sudo</code>. This is depicted in section Scripts to build in one step and mandates an invocation <code>sudo make install</code>. But when all components are compiled on their own its probably more convenient to open an additional root session and invoke <code>make install</code> there.   </p>"},{"location":"Building-from-source/#scripts-to-build-in-one-step","title":"Scripts to build in one step","text":"<p>Aside from hosting the main issue tracker repository lxqt provides some scripts to compile latest checkouts of the Git <code>master</code> development branch of all components in one step.  By default this repository does not contain any source code. Rather, source code is pulled by Git submodules, see below.   </p> <p>Script <code>build_all_autotools_projects.sh</code> is covering all components where code is configured by the autotools, <code>build_all_cmake_projects.sh</code> those where it is configured by CMake, <code>build_all.sh</code> is just sourcing the other two.  The only components relying on autotools are libfm and libfm-extra of LXDE which are needed by LXQt, too. But by now its' safe to use the precompiled packages providing theses libraries. This was reflected by stating them as prerequisite and means we'll only have to run <code>build_all_cmake_projects.sh</code>. If you do want to compile libfm and libfm-extra from the sources as well you have to uninstall the binary packages providing them as file conflicts will result otherwise.   </p> <p>To install the software after building the scripts will acquire root permissions via <code>sudo</code>. It belongs to the Prerequisites anyway but may need some configuration depending on the defaults of the various systems.</p> <p>First we have to prepare a local checkout of repository and source code by running <code>git</code> on the command line.  We'll start by cloning</p> <pre><code>git clone https://github.com/lxqt/lxqt.git\n</code></pre> <p>The repository is using Git submodules to include the actual source code. So next we acquire the sources by running   </p> <pre><code>cd lxqt\ngit submodule init\ngit submodule update --remote --rebase\n</code></pre> <p>It is strongly recommended to make a backup of directory <code>lxqt</code> prepared that way so as to avoid repeating this procedure should something go wrong.   </p> <p>The scripts support several environment variables, see explanation in the scripts' headers. The most important ones are * <code>LXQT_PREFIX</code>: Base directory relative to which LXQt is installed. Points to <code>/usr/local</code> by default and should be set to <code>/usr</code>. Technically it is corresponding with CMake variable <code>CMAKE_INSTALL_PREFIX</code>. * <code>LIB_SUFFIX</code>: Path relative to <code>LXQT_PREFIX</code> libraries are stored in. Can be used to adjust the path to habits of Linux distributions where different paths like <code>/usr/lib</code>, <code>/usr/lib64</code> or <code>/usr/lib/x86_64-linux-gnu</code> can be found. Technically it is corresponding with CMake variable <code>CMAKE_LIB_SUFFIX</code>.  Should only be set when the auto-detected default doesn't work as expected.</p> <p>So finally we can launch by running</p> <pre><code>LXQT_PREFIX=/usr ./build_all_cmake_projects.sh\n</code></pre>"},{"location":"Building-from-source/#qt5-support","title":"Qt5 Support","text":"<p>The script will build only with Qt6. For styling Qt5-based applications and allowing them to use LXQt file dialog, the following packages are needed, usually provided by your package manager:</p> <ul> <li>libqtxdg 3.12.0</li> <li>libfm-qt 1.4.0</li> <li>lxqt-qtplugin 1.4.1</li> </ul> <p>And if you want to compile them, you will need: * lxqt-build-tools 0.13.0</p> <p>These four Qt5-based packages can be installed in parallel with their Qt6-based versions, the fourth one being needed only for compiling the others.</p>"},{"location":"Contact/","title":"Contact","text":"<p>Some options that exist to ask general questions about LXQt.   </p>"},{"location":"Contact/#discussions","title":"Discussions","text":"<p>If you have a question or an idea, https://github.com/lxqt/lxqt/discussions. </p>"},{"location":"Contact/#ircmatrixtelegram","title":"IRC/Matrix/Telegram","text":"<ul> <li>Channel on OFTC.net: <code>#lxqt</code></li> <li>Matrix: https://matrix.to/#/#lxqt:matrix.org</li> <li>Telegram: https://t.me/lxqtofficial</li> </ul>"},{"location":"Contributing-code/","title":"Contributing Code","text":"<p>Welcome! Whether you just want to contribute a few patches, or be an active developer on LXQt, your help is greatly appreciated. LXQt is exclusively a volunteer effort. Finding people willing to contribute isn't always easy. That is why every bit of help can make huge differences.</p> <p>Let's get you started.</p>"},{"location":"Contributing-code/#development-environment","title":"Development environment","text":"<p>Due to its modular approach, you do not have to have every bit of LXQt compiled and installed by hand in order to work on it. As long as you have up-to-date git-version of lxqt-build-tools, libqtxdg, liblxqt and lxqt-qtplugin you can likely use a prepackaged version of LXQt as your day-to-day Desktop Environment. The Arch Linux AUR makes this very easy and is the preferred way for LXQt developers.</p> <p>KDevelop is an excellent Qt-based IDE for C++ and due to it being a KDE project, integrates really well with Qt projects. However, you will find that you do not necessarily need a full-blown IDE to contribute. Several developers work on LXQt off their favourite text editor - FeatherPad, JuffEd, Kate, or even Vim.</p> <p>Say for example you want to contribute to lxqt-runner. It is as simple as cloning the repository, then running:</p> <ul> <li><code>mkdir build &amp;&amp; cd build</code></li> <li><code>cmake ..</code></li> <li><code>make</code></li> </ul> <p>You can then run your self-compiled runner with <code>./lxqt-runner</code>. No installation necessary.</p>"},{"location":"Contributing-code/#getting-your-changes-merged","title":"Getting your changes merged","text":"<p>We use git. Our repositories are on GitHub. A basic understanding of git is required in order to contribute - there's plenty of tutorials on the web, look around!</p> <p>Still with our earlier lxqt-runner example, let's say you want to implement a new feature.</p> <p>Your first step should be to see if there is an existing issue for it. If there is, make sure to leave a note that you want to work on it. Once you have written the code for it, you will have to fork the repository, commit your changes and push them to your fork. Your next step will then be to file a pull request (\"PR\") with the LXQt repository (\"upstream\"). There, your changes will be reviewed by a developer and you may be asked to change or fix a few things. You do so by continuing to commit (or modifying existing commits) on your fork, and then running <code>git push</code> as you normally would - the pull request will be automatically updated. (Note that if you modified existing commits in your PR, you will have to run <code>git push --force</code>.)</p> <p>Eventually, the developer will recognize your PR as \"Good To Merge\" (\"GTM\"). Depending on the size of the changes, it will then be merged straight away or it will require the input of more developers.</p> <p>If you regularly contribute good code and are interested in joining the developer team, you will eventually get commit access. Keep at it!</p>"},{"location":"Contributing-code/#new-committer","title":"New committer","text":"<p>Once you got commit access don't run loose. Take care to not break something. In case of small changes you can just push them, but if you are not totally sure then rather file a PR and get at least one \"GTM\" from another developer. For big changes maybe even wait for three GTMs.</p> <p>Nobody is perfect, so in case you made a wrong commit which you would like to revert, do a:</p> <pre><code>git reset --hard &lt;hash&gt;\ngit push --force\n</code></pre> <p>Where \\&lt;hash&gt; is the last good commit. Forced pushes can be dangerous when you are working in a team. Only do this immediately after your commit, so chances are small someone already made another commit on top of your wrong one. You can break the tree if you don't take care. Don't do this.</p>"},{"location":"Contributing-code/#clean-commits","title":"Clean commits","text":"<p>To help getting your changes merged, please make sure your commits are clean!</p> <ul> <li>The surrounding code style should be respected. We also use 4 spaces for indentation everywhere. No mixed indents, no trailing whitespaces, and nothing unreadable!</li> <li>In most cases, the code should have no debug statements left over from testing and no commented out functionality.</li> <li>The commits themselves should be clean! Each commit should be working independently, add one feature/fix per commit and the commit messages should be descriptive of the change and properly spelled/capitalized. This is important for bisecting bugs and reading the log pleasantly.</li> <li>Tip: Learn, use and abuse <code>git rebase --interactive</code>. It will help you edit, clean and squash your existing commits. There are lots of excellent tutorials on how to use it.</li> <li>Make sure to set your <code>git config --global user.name</code> and <code>user.email</code> so that your real name and email can be available in the commit logs.</li> </ul>"},{"location":"Contributing-code/#getting-help","title":"Getting help","text":"<p>Feeling lost? Need mentoring? Do not hesitate to ask for help. There are several points of contact, all of which you should monitor if your goal is to be active on LXQt.</p> <ul> <li>LXQt Discussions is monitored by developers. Do not hesitate to ask for help, feedback and general input on issues or planned features there. It can also help a lot in keeping track of who is working on what.</li> <li>The #lxqt channel on OFTC, Telegram or Matrix (which are all bridged among them) and the #lxqt-dev channel on OFTC. The former is intended to be a user channel and the latter is for developers.</li> </ul> <p>Good luck!</p>"},{"location":"Creating-LXQt-Themes/","title":"Structure of an LXQt Theme","text":""},{"location":"Creating-LXQt-Themes/#theme-stylesheets-qss","title":"Theme Stylesheets (*.qss)","text":"<p>Themes for LXQt consist of a named directory under <code>/usr/share/lxqt/themes/</code> (global) or <code>$HOME/.local/share/lxqt/themes/</code> (per-user). Inside these folders are:</p> <ul> <li>Qt stylesheets, plaintext files ending in <code>.qss</code> and containing QSS selectors and theming directives. The stylesheets correspond to the executable name of the component they apply to. If one of the stylesheets is not present, the application in question will simply fall back to the chosen Qt widget style and palette. LXQt themes currently support the following stylesheets:</li> </ul> <ul> <li><code>lxqt-panel.qss</code> - Styles the <code>lxqt-panel</code> and its plugins. This file is mandatory.</li> <li><code>lxqt-runner.qss</code> - Styles the <code>lxqt-runner</code> dropdown, accessible with <code>Alt + F2</code>.</li> <li><code>lxqt-notificationd.qss</code> - Styles the <code>lxqt-notificationd</code> notification popups.</li> <li><code>lxqt-config.qss</code> - Styles the <code>lxqt-config</code> windows.</li> <li><code>lxqt-leave.qss</code> - Styles the <code>lxqt-leave</code> \"end session\" dialog.</li> </ul> <ul> <li> <p>Resources used by the theme, such as SVG graphics. These are used to provide an icon for the main menu and, for example, customized arrows and other small graphical elements to give your theme a unique look. You may also provide a default wallpaper (see below).</p> </li> <li> <p>A <code>preview.png</code> image, 100px wide by 32px high. This is usually taken from the panel with the main menu and desktop switcher widgets in view, and provides a quick impression of what the theme looks like.</p> </li> <li> <p>Optionally, a <code>wallpaper.cfg</code> file which specifies the included desktop background, which the user may choose to apply or not from the theme switcher.</p> </li> </ul>"},{"location":"Creating-LXQt-Themes/#color-palettes","title":"Color Palettes","text":"<p>LXQt also supports user-specified palettes of 8 colors, which are applied to the base Qt widget style chosen from the theming preferences configurator. Palettes are stored under <code>/usr/share/lxqt/palettes/</code> (global) or <code>$HOME/.local/share/lxqt/palettes/</code> (per-user). These are standard plaintext files, and the 8 values are specified as HTML hex triplets (i.e., #RRGGBB). </p> <p>Keep in mind that some Qt widget styles are less amenable than others to picking up user-defined palette colors. In particular, Fusion and Plastik are rather well-behaved, while Oxygen enforces a shaded gradient and Kvantum will likely ignore them outright.</p> <p>A sample palette file, that of the base Clearlooks theme, is shown below - note the <code>[Palette]</code> header before the actual color definitions:</p> <p><code>[Palette] base_color=#ffffff highlight_color=#80a0d0 highlighted_text_color=#ffffff link_color=#0000ee link_visited_color=#ffb3f7 text_color=#1a1a1a window_color=#edeceb window_text_color=#1a1a1a</code></p> <p>Most of these are self-explanatory. For the rest: <code>window_color</code> refers to the \"bulk\" of an application, such as a file manager's menubars and controls, while <code>base_color</code> would govern the display pane with the icon or list view of the filesystem in it; likewise the <code>text_color</code> and <code>window_text_color</code> definitions.</p> <p>LXQt themes have the ability to pick up colors from the active palette, which allows for some interesting theming possibilities. For example, this is how Azuma Hazuki's Mint-Y LXQt themes collection works: rather than ship nearly two dozen redundant full themes, it consists simply of a light and dark variant along with a set of palettes, from which the themes draw their highlights and accent colors. Switching palettes changes these colors dynamically.</p>"},{"location":"Creating-LXQt-Themes/#writing-themes","title":"Writing Themes","text":""},{"location":"Creating-LXQt-Themes/#qt-stylesheet-syntax","title":"Qt Stylesheet Syntax","text":"<p>The syntax of .qss stylesheets should be immediately familiar to anyone who has worked with CSS, and is covered in great detail here. Aspiring theme creators should be familiar with the box model and the precedence rules of QSS selectors.</p> <p>Broadly speaking, QSS operates on an \"outside-in\" model, whereby more general selectors are overridden by more specific ones. The hypothetical case </p> <p>``` * {         color: #00ff00;         background: #000000;  } </p> <p>QMenu {        color: #ffff00;         background: #000040;  } ```  will produce green text on a pure black background everywhere except standard Qt menus, which will have yellow text on a navy-blue background.</p>"},{"location":"Creating-LXQt-Themes/#theming-lxqt-applications","title":"Theming LXQt Applications","text":"<p>LXQt includes many widgets derived from the base Qt classes, which are generally addressed with a <code>#</code> to denote that they are identifiers, rather than classes or class families of widgets; for example, <code>#MainMenu</code> references the \"Start Menu\" plugin of the LXQt panel, while <code>#MainMenu QMenu { some_option: something; }</code> will theme only those widgets of type QMenu that descend from (that is, which are created by and embedded in) the <code>#MainMenu</code> plugin itself. </p> <p>Important: widgets beginning with a <code>#</code> will not pass their theming directives down to their descendants. This is why it is necessary to style, for example, <code>#TaskBar QToolButton</code> to alter taskbar buttons</p> <p>While it is not mandatory to theme any specific widget or plugin in any specific order, there are some best practices to keep in mind for legible and maintainable theme files:</p> <ol> <li>Try to theme specific widgets and their descendants close to one another - keep your menu theme directives separate from the ones for the taskbar, clock, etc.</li> <li>Because QSS specifiers have higher priority the more specific they are, it is good practice to place those specifying broader or more general rules closer to the top of the file. Within sections for individual plugins/widgets, it is likewise good to specify the top-level identifier first and then its sub-widgets, their subcontrols and pseudostates, and so forth, under these.</li> <li>However, if you specifically wish to theme different widgets identically, you may further save space by defining them with a comma-separated list of selectors. For example, if you wish your taskbar and desktop switcher buttons to have the same appearance, you can try something like <p>```</p> </li> </ol>"},{"location":"Creating-LXQt-Themes/#taskbar-qtoolbutton-desktopswitch-qtoolbutton","title":"TaskBar QToolButton, #DesktopSwitch QToolButton {","text":"<pre><code>    property: value;\n    other_property: other_value;\n</code></pre> <p>} ```</p>"},{"location":"Creating-LXQt-Themes/#the-lxqt-panel-pathlxqt-panel","title":"The LXQt Panel (<code>$PATH/lxqt-panel</code>)","text":"<ul> <li>The LXQt panel consists of a base executable which draws a horizontal (or vertical) area onto the screen, optionally and by default reserving space for itself so as not to be covered by application windows. Everything we normally associate with a panel - application menu, taskbar, system tray, clock, and so forth - is a plugin, a small self-contained applet which is drawn in a specific position on the panel and which may be interacted with via mouse, keyboard, touch, etc.</li> </ul>"},{"location":"Creating-LXQt-Themes/#list-of-widgets-themeable-in-lxqt-panelqss","title":"List of widgets themeable in <code>lxqt-panel.qss</code>","text":""},{"location":"Creating-LXQt-Themes/#the-panel-itself","title":"The Panel Itself","text":""},{"location":"Creating-LXQt-Themes/#lxqtpanel-backgroundwidget","title":"LXQtPanel #BackgroundWidget","text":"<p>The groundmass of the panel, which will show below/around any other widgets</p>"},{"location":"Creating-LXQt-Themes/#menus-and-submenus","title":"Menus and Submenus","text":""},{"location":"Creating-LXQt-Themes/#mainmenu","title":"#MainMenu","text":"<p>The \"start menu\" button plugin, visible on the panel. * Add an icon with <code>qproperty-icon: url(path/to/image.ext);</code> * Theme submenus with <code>#MainMenu QMenu</code> * * <code>#TopLevelMainMenu</code> lets you explicitly theme only the initial menu popup; useful for faking a Win9x/2000-style banner, as seen here * Theme the search entry with <code>#MainMenu QMenu QLineEdit</code> * Theme the search results with<code>#MainMenu ActionView</code></p>"},{"location":"Creating-LXQt-Themes/#qmenu","title":"QMenu","text":"<p>Themes standard QMenu child widgets of the panel, such as the right-click menus. * Has subcontrols <code>::(item,left-arrow,right-arrow,indicator)</code> * * All subcontrols may be in <code>:(hover,selected,disabled)</code> pseudostates * * * The <code>::indicator</code> subcontrol also has the radiobutton-like <code>:exclusive:checked</code>/<code>:exclusive:unchecked</code> and checkbox-like <code>:non-exclusive:checked</code>/<code>:non-exclusive:unchecked</code> pseudostates. You may theme these with <code>image: url(path/to/image.ext);</code> directives. * <code>QMenu QToolButton</code> allows you to theme the headers of menus, which are implemented as QToolButton objects.</p>"},{"location":"Creating-LXQt-Themes/#the-taskbar","title":"The Taskbar","text":""},{"location":"Creating-LXQt-Themes/#taskbar","title":"#TaskBar","text":"<p>The background of the taskbar. May be set to <code>background: transparent;</code> to inherit the color from <code>LXQtPanel #BackgroundWidget</code> if desired.</p> <p>Taskbar buttons are addressed with <code>#TaskBar QToolButton</code> and have the following pseudostates:</p> <ul> <li><code>#TaskBar QToolButton:on</code> is the active state, corresponding to the focused application's button.</li> <li><code>#TaskBar QToolButton:hover</code> is the appearance of an inactive task's button when the cursor is on top of it.</li> <li><code>#TaskBar QToolButton:pressed</code> is the appearance of a task button when receiving a left click event.</li> <li><code>#TaskBar QToolButton[urgent=\"true\"]</code> is the appearance of a task button which has set the standard urgency hint. Note the lack of a leading <code>:</code> here.</li> </ul> <p>Logically-valid combinations of these states are possible, such as * <code>#TaskBar QToolButton:on:hover</code>, which is the appearance of the active task button when the cursor is on top of it.</p> <p>The pseudostates will derive their <code>padding</code>, <code>margin</code>, etc. values from the base <code>#TaskBar QToolButton</code> block, though you may alter these if desired.</p>"},{"location":"Creating-LXQt-Themes/#the-virtual-desktop-switcher","title":"The Virtual Desktop Switcher","text":""},{"location":"Creating-LXQt-Themes/#desktopswitch","title":"#DesktopSwitch","text":"<p>Most window managers have the ability to implement virtual desktops, and this widget produces a set of buttons to display, track, and allow switching between these. LXQt is designed to be WM-agnostic, so the plugin should work with any compliant window manager's implementation of virtual desktops.</p> <ul> <li><code>#DesktopSwitch QToolButton</code> works exactly the same as its taskbar variant above, and it is possible and encouraged to declare them both together if you wish your theme to draw them identically; see here for how.</li> </ul>"},{"location":"Creating-LXQt-Themes/#the-quicklaunch-toolbar","title":"The Quicklaunch Toolbar","text":""},{"location":"Creating-LXQt-Themes/#quicklaunch","title":"#QuickLaunch","text":"<p>The Quicklaunch plugin provides a space for the user to drag-and-drop icons from the main menu, enabling simple one-click access to them. * <code>#QuickLaunch QToolButton</code> will theme the individual app buttons that have been dragged-and-dropped into the launcher dock.</p>"},{"location":"Creating-LXQt-Themes/#quicklaunchplaceholder","title":"#QuickLaunchPlaceHolder","text":"<ul> <li><code>#QuickLaunchPlaceHolder</code> themes the \"drop application icons here\" area and caption of a default (empty) Quicklaunch toolbar.</li> </ul>"},{"location":"Creating-LXQt-Themes/#the-world-clock","title":"The World Clock","text":""},{"location":"Creating-LXQt-Themes/#worldclock-deprecates-clock","title":"#WorldClock (deprecates #Clock)","text":"<p>The LXQt WorldClock plugin is able to display time, date, and timezone in a fully-localizable, standards-compliant manner. It also displays a calender when clicked, about which see below. * <code>#WorldClock</code> themes the area of the panel reserved for the clock widget as a whole. * <code>#WorldClockContent</code> specifically themes the caption of the clock widget.</p>"},{"location":"Creating-LXQt-Themes/#the-calendar","title":"The Calendar","text":""},{"location":"Creating-LXQt-Themes/#qcalendarwidget","title":"QCalendarWidget","text":"<ul> <li>TODO: Please document the many, many, many options for the QCalendarWidget plugin here. The Kvantum theme may be a good place to look. </li> </ul>"},{"location":"Creating-LXQt-Themes/#the-lxqt-runner-pathlxqt-runner","title":"The LXQt Runner  (<code>$PATH/lxqt-runner</code>)","text":"<ul> <li>The LXQt Runner is a self-contained dropdown widget, similar to KDE Plasma's <code>krunner</code>, which accepts text input and updates search results in real time. It is accessible by pressing <code>Alt + F2</code> (by default) in a running LXQt session.</li> </ul>"},{"location":"Creating-LXQt-Themes/#list-of-widgets-themeable-in-lxqt-runnerqss","title":"List of widgets themeable in <code>lxqt-runner.qss</code>","text":""},{"location":"Creating-LXQt-Themes/#panel","title":"#panel","text":"<ul> <li>This is the body of the LXQt Runner application</li> </ul>"},{"location":"Creating-LXQt-Themes/#closebutton","title":"#closeButton","text":"<ul> <li>Clicking this closes the LXQt runner. Theme with <code>qproperty-icon: url(path/to/image.ext);</code></li> </ul>"},{"location":"Creating-LXQt-Themes/#actionbutton","title":"#actionButton","text":"<ul> <li>Clicking this displays the logout/shutdown menu. Theme with <code>qproperty-icon: url(path/to/image.ext);</code></li> </ul>"},{"location":"Creating-LXQt-Themes/#commanded","title":"#commandEd","text":"<ul> <li>This is the command-entry area, and takes the same options as a QLineEdit widget.</li> </ul>"},{"location":"Creating-LXQt-Themes/#commandlist","title":"#commandList","text":"<ul> <li>The list of filtered items matching what is typed in the #commandEd above.</li> <li>Has subcontrol <code>::item</code>, which has pseudostates <code>:alternate,:hover,:selected</code>.</li> </ul>"},{"location":"Creating-LXQt-Themes/#qmenu_1","title":"QMenu","text":"<ul> <li>This is the logout/shutdown menu displayed when the user clicks the #actionButton widget.</li> </ul>"},{"location":"Creating-LXQt-Themes/#the-lxqt-notification-daemon-pathlxqt-notificationd","title":"The LXQt Notification Daemon (<code>$PATH/lxqt-notificationd</code>)","text":"<ul> <li>The LXQt Notification Daemon listens for standard FreeDesktop.org notification events and displays transient popups when these occur.</li> </ul>"},{"location":"Creating-LXQt-Themes/#list-of-widgets-themeable-in-lxqt-notificationdqss","title":"List of widgets themeable in <code>lxqt-notificationd.qss</code>","text":""},{"location":"Creating-LXQt-Themes/#notification","title":"Notification","text":"<ul> <li>This is the body of the notification message itself.</li> </ul>"},{"location":"Creating-LXQt-Themes/#closebutton_1","title":"#closeButton","text":"<ul> <li>Appears in the corner of the notification. Style with <code>qproperty-icon: url(path/to/image.ext);</code></li> </ul>"},{"location":"Creating-LXQt-Themes/#applabel","title":"#appLabel","text":"<ul> <li>Caption showing the name of the application that threw the notification in question.</li> </ul>"},{"location":"Creating-LXQt-Themes/#the-lxqt-configurator-pathlxqt-config","title":"The LXQt Configurator (<code>$PATH/lxqt-config</code>)","text":"<ul> <li>The LXQt Configurator is the central hub for configuring how LXQt operates. It is analagous to Xfce's <code>xfce4-settings-manager</code>, GNOME's <code>gnome-control-center</code>, KDE Plasma's <code>systemsettings5</code>, and so forth.</li> </ul>"},{"location":"Creating-LXQt-Themes/#list-of-widgets-themeable-in-lxqt-configqss","title":"List of widgets themeable in <code>lxqt-config.qss</code>","text":"<ul> <li>TODO: To date, no extant LXQt theme contains this stylesheet. Please document the available widgets here as they are discovered.</li> </ul>"},{"location":"Creating-LXQt-Themes/#the-lxqt-leave-dialog-pathlxqt-leave","title":"The LXQt Leave Dialog (<code>$PATH/lxqt-leave</code>)","text":"<ul> <li>The LXQt leave dialog is a simple window that appears when the user selects Leave from the main menu or otherwise invokes it.</li> </ul>"},{"location":"Creating-LXQt-Themes/#list-of-widgets-themeable-in-lxqt-leaveqss","title":"List of widgets themeable in <code>lxqt-leave.qss</code>","text":""},{"location":"Creating-LXQt-Themes/#qdialog","title":"QDialog","text":"<ul> <li>The main body of the Leave Dialog is a QDialog widget.</li> </ul>"},{"location":"Creating-LXQt-Themes/#qlabel","title":"QLabel","text":"<ul> <li>Styles the \"What would you like the computer to do?\" and \"Are you sure you want to {logout/shutdown/hibernate}?\" captions.</li> </ul>"},{"location":"Creating-LXQt-Themes/#qabstractitemview","title":"QAbstractItemView","text":"<ul> <li>The six action icons are contained inside a QAbstractItemView widget.</li> <li> <ul> <li>Notably, as of LXQt 1.2.x, <code>background: #RRGGBB;</code> and similar do not work; to get around this, create a 1x1 image file of the color you would like to apply behind the icons and apply it with <code>background-image: url(path/to/image.ext);</code>. You can still theme the captions (<code>color: #RRGGBB</code>) and apply borders, margins, etc., but for now the background does not accept simple colors.</li> </ul> </li> </ul>"},{"location":"Creating-LXQt-Themes/#qpushbutton","title":"QPushButton","text":"<ul> <li>The yes/no buttons on child dialogs are QPushButton widgets.</li> </ul>"},{"location":"Creating-LXQt-Themes/#qtoolbutton","title":"QToolButton","text":"<ul> <li>The \"Cancel\" button on the main dialog is a QToolButton. It may be wise to theme both together with <code>QPushButton, QToolButton { ... }</code>.</li> </ul>"},{"location":"General/","title":"General","text":"<p>Global configuration files are <code>/etc/xdg/lxqt-qtxdg.conf/</code> and files in <code>/usr/share/lxqt/</code> whereas user-specific configuration files are stored in <code>~/.config/lxqt/</code>, the INI format is used.   </p> <p>The main configuration files are</p> LXQt Component Configuration File lxqt lxqt.conf panel panel.conf session session.conf runner lxqt-runner.conf globalkeys globalkeyshortcuts.conf powermanagement lxqt-powermanagement.conf appearance lxqt-config-appearance.conf monitor lxqt-config-monitor.conf locale lxqt-config-locale.conf filedialog filedialog.conf notifications notifications.conf archiver archiver.conf"},{"location":"General/#pcmanfm-qt","title":"PCManFM-Qt","text":"<ul> <li>User settings are stored in <code>~/.config/pcmanfm-qt/lxqt/</code></li> <li>Custom actions can be created in<code>~/.local/share/file-manager/actions/</code></li> </ul> <p>PCManFM-Qt is documented in detail at the PCManFM-Qt Wiki. </p>"},{"location":"General/#pavucontrol-qt","title":"Pavucontrol-Qt","text":"<p>User settings are stored in <code>~/.config/pavucontrol-qt/</code></p>"},{"location":"General/#lximage-qt","title":"LXImage-Qt","text":"<p>User settings are stored in <code>~/.config/lximage-qt/</code></p>"},{"location":"General/#qterminal","title":"QTerminal","text":"<p>User settings are stored in <code>~/.config/qterminal.org/</code></p>"},{"location":"General/#lxqt-archiver","title":"LXQt-Archiver","text":"<p>User settings are stored in <code>~/.config/lxqt/archiver.conf</code></p>"},{"location":"General/#screengrab","title":"ScreenGrab","text":"<p>User settings are stored in <code>~/.config/screengrab/</code></p>"},{"location":"History/","title":"History","text":"<p>People often confuse LXQt as a rewrite of LXDE in Qt. However, this is not true.</p>"},{"location":"History/#lxde-qt","title":"LXDE-Qt","text":"<p>PCMan, the original author of LXDE, started experimenting with Qt by implementing a GUI for PCManFM in Qt. While doing so he wrote a guide for migrating from GTK+ to Qt, where he sums up his experiences.</p> <p>When he released a preview, some people feared that a Qt-based desktop environment would be resource-heavy and bloated. So, he posted about LXDE-Qt not being bloated. LXDE was written in GTK+2, but times changed, and GTK+3 arrived. GTK+3 changed people's opinions so much so that an LXDE port to Qt was considered superior to a port to GTK+3.</p> <p>[!NOTE] For those interested in numbers, read PCMan's post about resource usage and performance.</p>"},{"location":"History/#razor-qt","title":"Razor-qt","text":"<p>While PCMan was experimenting with Qt, another group of people was working on a Qt-based desktop environment called Razor-qt. Eventually the people behind the LXDE-Qt and Razor-qt projects decided to work together. Thus was born LXQt. So, instead of being a rewrite of LXDE in Qt, LXQt is rather a lightweight desktop environment heavily based on the Razor-qt code base, and developed by a team consisting of LXDE and ex-Razor-qt developers.</p>"},{"location":"History/#lxqt","title":"LXQt","text":"<p>The announcement of the first alpha release of LXQt used the phrase \"LXDE-Qt or LXQt\". Some distributions still had it categorized under the name LXDE-Qt, for historical reasons that should be clear by now. However, the debate is settled, and the official name of the project is LXQt.</p> <p>Initially LXQt used Qt4. In June 2014, LXQt got full Qt5 support. Since version 0.9.0, LXQt only supports Qt5, since version 2.0.0 only Qt6.</p> <p>It had been switching from using many individually developed libraries to instead use the KFrameworks5 library. Again, some people where afraid of introducing bloat because they thought it would mean including all KDE libraries and dependencies, but once again this has not been the case. KFrameworks5 was actually introduced in an attempt to split the basic functionality from KDE specific libraries and thus make it usable in other projects than just KDE. Currently KF6 and Qt6 are used.</p>"},{"location":"Home/","title":"Home","text":""},{"location":"Home/#welcome-to-the-lxqt-wiki","title":"Welcome to the LXQt wiki","text":"<p>This is the wiki of the LXQt project, which is the fusion of the LXDE-Qt and Razor-qt projects.</p>"},{"location":"Home/#introduction","title":"Introduction","text":"<p>LXQt is a free and open source lightweight desktop environment.</p>"},{"location":"Home/#installation","title":"Installation","text":"<ul> <li>Precompiled binary packages are provided by all major Linux and BSD distributions.   </li> <li>Instructions on how to compile from the sources.   </li> </ul>"},{"location":"Home/#configuration","title":"Configuration","text":"<ul> <li>The concepts of the configuration.  </li> </ul>"},{"location":"Home/#development","title":"Development","text":"<ul> <li>Contribute code.</li> <li>Report bugs</li> <li>Contribute to translation.</li> </ul>"},{"location":"How-To-Release-A-New-Version-of-LXQt/","title":"How To Release A New Version of LXQt","text":""},{"location":"How-To-Release-A-New-Version-of-LXQt/#order","title":"Order","text":"<p>Preparing and releasing of LXQt components can be done in this order (only important components are listed and the order isn't strict near the end):</p> <pre><code>  lxqt-build-tools\n  libqtxdg\n  liblxqt\n  libfm-qt\n  pcmanfm-qt\n  lxqt-qtplugin\n  lximage-qt\n  lxqt-archiver\n  libsysstat\n  lxqt-about\n  lxqt-config\n  lxqt-globalkeys\n  lxqt-notificationd\n  lxqt-policykit\n  lxqt-powermanagement\n  lxqt-session\n  lxqt-sudo\n  lxqt-panel\n  lxqt-runner\n  lxqt-themes\n  qtermwidget\n  qterminal\n  lxqt-openssh-askpass\n  lxqt-admin\n  xdg-desktop-portal-lxqt \n  pavucontrol-qt\n  screengrab\n  qps\n  \u2026\n</code></pre> <p>You should have installed the latest git versions of all LXQt components and be satisfied with their performance before proceeding.</p>"},{"location":"How-To-Release-A-New-Version-of-LXQt/#preparation","title":"Preparation","text":"<ol> <li>Prepare the components for their new releases by making PRs (with titles like \"Pre-release changes\") for:<ul> <li>Incrementing versions;</li> <li>Incrementing ABI versions if relevant;</li> <li>Incrementing versions of dependencies;</li> <li>Incrementing the minimum Qt version only if needed; and</li> <li>Updating CHANGELOGs.</li> </ul> </li> <li>Merge the above-mentioned PRs when ready and prepare release notes for release pages. Release notes can be extracted from change logs \u2014 from the most to the least exciting changes \u2014 so that the average user could understand them easily.</li> </ol>"},{"location":"How-To-Release-A-New-Version-of-LXQt/#releasing","title":"Releasing","text":"<p>Release the components in the above-mentioned order. To do so, for each component:   1. Make a signed tag (the version), verify it and push it.   2. Create <code>PACKAGE-TAG.tar.xz</code> from the latest git source and also <code>PACKAGE-TAG.tar.xz.asc</code> by using <code>gpg</code>.   3. Go to GitHub release page, edit the latest release (which has already been created because of 2), add its release note (which you've already made) and upload <code>PACKAGE-TAG.tar.xz</code> and <code>PACKAGE-TAG.tar.xz.asc</code>.   4. Release it!</p>"},{"location":"How-To-Release-A-New-Version-of-LXQt/#announcement","title":"Announcement","text":"<p>Announce the new version of LXQt with some highlights as the release note of <code>lxqt-about</code>.</p> <p>Tell distro maintainers that they can start their jobs. If someone finds an issue in your work, fix it \u2014 of course, reluctantly because you're tired now.</p>"},{"location":"Launching-LXQt-sessions/","title":"Launch Sessions","text":"<p>LXQt X11 sessions are launched by a script <code>startlxqt</code> and handled by a binary (\"session manager\") <code>lxqt-session</code> which belongs to lxqt-session.  </p> <p>LXQt Wayland sessions are launched by a script <code>startlxqtwayland</code> instead. </p>"},{"location":"Launching-LXQt-sessions/#launching-from-virtual-terminals","title":"Launching from virtual terminals","text":"<p>In Linux, add the following line to the file <code>~/.xinitrc</code>.</p> <pre><code>exec startlxqt\n</code></pre> <p>In FreeBSD, add the following line to the file <code>~/.xinitrc</code>. </p> <pre><code>exec dbus-launch --exit-with-x11 ck-launch-session startlxqt\n</code></pre> <p>The session can be launched by invoking <code>startx</code> shell command.</p> <p>[!WARNING] Ensure one of the following conditions is true regarding the <code>~/.xinitrc</code> file: * only one entry exists * multiple entries follow the rules described here.</p> <p>The Wayland session can be started directly invoking <code>startlxqtwayland</code>.</p>"},{"location":"Launching-LXQt-sessions/#launching-by-display-managers","title":"Launching by display managers","text":"<p>Display managers like SDDM, the one recommended for LXQt, or LightDM are looking for available x11 sessions in files <code>$XDG_DATA_DIRS/xsessions/*.desktop</code> where <code>$XDG_DATA_DIRS</code> is set to <code>/usr/share/</code> most of the times,while for the Wayland sessions the directory is <code>/usr/share/wayland-sessions/</code>.  LXQt is providing the files <code>lxqt.desktop</code> and <code>lxqt-wayland.desktop</code> (if <code>lxqt-wayland-session</code> is installed) so its sessions should normally be detected and made available by display managers automatically, restarting the latter may be needed upon installing LXQt.   </p> <p>Note if LXQt was installed in <code>/usr/local</code> file <code>lxqt.desktop</code> is stored in <code>/usr/local/share/xsessions</code> which is not considered by most display managers. So you'll either have to copy the file to <code>/usr/share/xsessions/</code> or create a symbolic link.   </p>"},{"location":"Launching-LXQt-sessions/#fixing-crashes-for-apps-using-dbus-daemon-common-when-using-lxqt-config-monitor","title":"Fixing crashes for apps using dbus-daemon (common when using lxqt-config-monitor)","text":"<p>Important: This applies only to systems running systemd which have this problem.</p> <p>On some systems (like the default ArchLinux install), dbus-daemon is started as a systemd service before the xserver thus it has no $DISPLAY variable set in it's environment, leding to crashes. Systemd by default includes a script to fix this by fetching the variables in /etc/X11/xinit/xinitrc.d/50-systemd-user.sh. If you encounter this kind of crash add the following lines to your .xinitrc before <code>exec startlxqt</code></p> <pre><code>if [ -d /etc/X11/xinit/xinitrc.d ] ; then\n for f in /etc/X11/xinit/xinitrc.d/?*.sh ; do\n  [ -x \"$f\" ] &amp;&amp; . \"$f\"\n done\n unset f\nfi\n</code></pre>"},{"location":"Maintaining-a-good-new-dev-experience/","title":"Maintaining a good new dev experience","text":"<p>LXQt is short on manpower. For that reason, our best investment is into making it as easy as possible for new developers to contribute to the project and get familiar enough with it to become a regular contributor.</p> <p>For a high quality new dev experience, this is what we have to maintain:</p> <ol> <li>A clear, crisp and understandable codebase with immediately-available documentation</li> <li>Communication channels with people familiar with the codebase</li> <li>Clear goals: What we want, our priorities, etc.</li> <li>A \"Beginner's guide\" with pointers on where to begin</li> </ol> <p>Let's review those one by one. Keep in mind, exceptions can always be made with a good reason. </p> <p>Maintaining a clear, understandable codebase:</p> <ul> <li>Clear and concise code. No hacks, no syntax-soup. The code should be easy to follow even without an IDE. Functions and variables should have descriptive names and some thought should go into which files functionality ends up in.</li> <li>Code style should be consistent. Not just within single files but throughout all of LXQt. We should have a styleguide and keep it short and example-driven so that our devs can naturally integrate it.</li> <li>Prioritize maintainability over performance in non-performance-critical sections. </li> <li>No debug code left in production, even commented-out.</li> <li>Test suites are good, and they're best added early. Since we're a DE, don't test UI, test functionality. This is especially important for libraries.</li> </ul> <p>Immediately-available documentation:</p> <ul> <li>Separate documentation (wiki, articles, etc)</li> <li>Best used for things that have no relation to specific parts of the code. Reading material, how-tos, guides, etc. Beginner's Guide is part of this. It should not depend on the code (eg. if the code is updated, the documentation shouldn't suddenly be out of date).</li> <li>User-driven documentation should be very easy to edit. Github wiki is a great platform for that (no pull requests, no approval).</li> <li>It's not enough that documentation exists, it has to be easy to find! Link it wherever it's expected or helpful.</li> <li>Code metadata</li> <li>Comments! Comment your code whenever you are doing something complex or unintuitive. Always document workarounds appropriately. When you fix a bug is also a good time to ask yourself if you shouldn't add a comment for it. </li> <li>On the other hand, do not over-comment. Do not simply repeat what the code says in English, comments should almost always add to the reader's comprehension.</li> <li>Keep a clean <code>git log</code>! It is one of the first things a developer will look at when checking out a project. When you commit, maintain the same name and, if possible, email.</li> <li>Write informative commit messages.<ul> <li>Avoid merge commits when merging PRs, we prefer rebase (fast forward).</li> </ul> </li> <li>Similarly, respect <code>git blame</code>. One commit per feature, and each commit should compile and work reasonably well (so that bisection for regression testing is possible). Avoid very large commits.</li> </ul> <p>Communication channels with people familiar with the codebase:</p> <ul> <li>Maintainers in the file headers, with name + email address. </li> <li>IRC is our main communication channel. If you're a regular contributor please be online and logged in if possible so you can be autovoiced for easy pings.</li> <li>Prominent links to our mailing list. We really should move it to <code>@lxde.org</code> ASAP, so that we have control over the archives.</li> </ul> <p>Clear goals: What we want, our priorities, etc:</p> <p>Each release should have well documented tasks. Priorities should be clear. Guidelines on what goes or doesn't go into LXQt should be clarified whenever possible; we want to avoid feature creep, but we don't want to stop people from contributing third party software. The QtDesktop organization is there for grouping development on such software if ever needed. This is all mostly on me (@jleclanche) so do not hesitate to bug me for it :-)</p> <p>Writing a Beginner's Guide:</p> <p>This is self-explanatory. LXQt has a lot of components, we should have clear entry points for contribution to each of them. Communication channels should be repeated there. Ask new devs for feedback on pain points to figure out what to improve. CONTRIBUTING.md is a good starting point and should link to it.</p> <p>Apart from the beginner's guide, these are rules which help all contributors including long-time ones. We should work on them starting immediately.</p>"},{"location":"Miscellaneous/","title":"Miscellaneous","text":""},{"location":"Miscellaneous/#autostart-applications-on-login","title":"Autostart Applications on Login","text":"<p>Launching applications at the beginning of LXQt sessions is implemented according to the to the XDG Autostart Specification.   </p> <p>Basically this means suitable desktop entry files have to be placed in <code>~/.config/autostart/</code>.  These files can be handled manually or from configuration dialogue LXQt Session Settings (binary <code>lxqt-config-session</code>) which belongs to lxqt-session.   </p> <p>For an explanation of terms \"Global Autostart\" and \"LXQt Autostart\" see section Autostart in the repository's <code>README.md</code>.  Note this distinction is currently suffering from a problem addressed in issue lxqt#746.   </p>"},{"location":"Miscellaneous/#lxqt-modules","title":"LXQt Modules","text":"<p>Under \"Session settings\" it is possible to start/stop and enable/disable single modules. Any application which contains <code>X-LXQt-Module=true</code> in its <code>.desktop</code> file in <code>/usr/share/applications</code> or <code>~/.local/share/applications</code> will be handled as a module. This can be useful for applications like compositors (compton or picom) and similar.</p>"},{"location":"Miscellaneous/#default-applications","title":"Default Applications","text":"<p>The default browser, email client and file manager can be set by using File Associations dialog (<code>lxqt-config-file-associations</code>) \u2192 Default Applications.</p> <p>LXQt's command-line tool for manipulating MIME type associations and default applications is <code>qtxdg-mat</code>, provided by qtxdg-tools. It can also set the default terminal. See <code>qtxdg-mat --help</code> for details.</p> <p>NOTE: The default terminal used by PCManFM-Qt should be set in its Preferences dialog \u2192 Advanced.</p>"},{"location":"Miscellaneous/#lxqt-filedialog-in-gtk-applications","title":"LXQt Filedialog in GTK Applications","text":"<p>Requires xdg-desktop-portal-lxqt.</p> <ul> <li>Firefox version 98 and higher:  Open in the address bar <code>about:config</code>, search for \"portal\" and set both <code>widget.use-xdg-desktop-portal.file-picker</code> and <code>widget.use-xdg-desktop-portal.mime-handler</code>  from <code>2</code> to <code>1</code>. </li> <li>Thunderbird: Preferences &gt; Configuration Editor <code>widget.use-xdg-desktop-portal</code> has to be set to <code>1</code>. </li> <li>Some other GTK applications can be started with <code>GTK_USE_PORTAL=1 application</code></li> </ul> <p>A general use of <code>GTK_USE_PORTAL=1</code> in <code>~/.profile</code> or <code>/etc/profile</code> can lead to issues and  is not recommended. </p> <p>If multiple xdg-desktop-portals are installed  to use the LXQt filedialog in a LXQt session the file <code>~/.config/xdg-desktop-portal/lxqt-portals.conf</code> has to be created containing:</p> <pre><code>[preferred]\ndefault=lxqt\n</code></pre> <p>For details see https://flatpak.github.io/xdg-desktop-portal/docs/portals.conf.html</p>"},{"location":"Miscellaneous/#lxqt-panel","title":"LXQt Panel","text":"<p>Settings are accessible by right click on free space on the panel or its  plugins (except window buttons in task manager) and can be blocked completely checking the last item to prevent accidental changes or removals of plugins.</p> <p>Plugins can be configured either by right click or by Panel Settings \u2192 Plugin \u2192 icon \"...\"</p>"},{"location":"Miscellaneous/#plugin-keyboard-indicator","title":"Plugin Keyboard-Indicator","text":"<p>It is possible to show country flags instead of the  ISO code  for the keyboard layout installing <code>iso-flags-svg</code> or <code>iso-flags-png</code> if provided by the distribution in use. An independent set can be found here. The path to the folder containing the flags has to be configured manually, example <code>/usr/share/iso-flags-svg/country-4x3/%1.svg</code>. </p>"},{"location":"Miscellaneous/#add-or-modify-main-menu-entries","title":"Add or modify Main Menu Entries","text":"<ul> <li>To  modify an existing menu entry  the application's <code>.desktop</code> file can be copied from <code>/usr/share/applications/</code> to <code>~/.local/share/applications/</code> and then edited. Changes will not be lost on updates.</li> <li>To add a new menu entry <code>~/.local/share/applications/</code> can be opened in PcManFM-qt and by Tools \u2192 Create Launcher a new entry can be configured.</li> </ul>"},{"location":"Miscellaneous/#power-profiles","title":"Power Profiles","text":"<p>With LXQt \u2265 2.2, if <code>power-profiles-daemon</code> is installed, the available profiles could be changed by right clicking the battery icon.</p>"},{"location":"Miscellaneous/#libreoffice-openoffice-vs-environment-variable-sal_use_vclplugin","title":"LibreOffice / OpenOffice vs. environment variable SAL_USE_VCLPLUGIN","text":"<p>Both office suites do not use one of the well-known widget toolkits like GTK or Qt but stick with their custom \"Visual Components Library (VCL)\". Integrating with the former is handled by components called <code>plugins</code>.   </p> <p>A choice among the available plugins is made by setting environment variable <code>SAL_USE_VCLPLUGIN</code> which is accepting values <code>gen</code> (\"generic\", hence no use of plugins / native VCL UI), <code>gtk3</code>, <code>gtk4</code>, <code>kf6</code> (KDE), <code>qt5</code> and <code>qt6</code>.  System defaults are set by files <code>/etc/profile.d/libreoffice-&lt;flavour&gt;.&lt;shell&gt;</code>. Alternatively in LXQt the variable can be set in the session configuration dialogue LXQt Session Settings under \"Advanced\". By default it is not set this way but if set it supersedes other means to tweak the variable.</p> <p>Note the support of the Qt ecosystem is rather poor. Unlike in GTK there's no interaction with the widget toolkit itself but with KDE libraries in an outdated version only. In particular it is currently not possible to use the generic Qt file chooser dialogues with LibreOffice or OpenOffice.  Also, enabling a certain plugin does not necessarily mean the corresponding backends are available which rather have to be installed independently.   </p>"},{"location":"Reporting-bugs/","title":"Reporting Bugs","text":"<p>All our issues are tracked on GitHub.</p> <p>Please use the search to check if the problem you're about to report has already been reported.   </p> <p>All general LXQt bug reports should be filed on the general LXQt bug tracker.   </p> <p>All components and applications have their own issue tracker on GitHub, for example:</p>"},{"location":"Reporting-bugs/#components","title":"Components","text":"<ul> <li>libqtxdg</li> <li>libsysstat</li> </ul>"},{"location":"Reporting-bugs/#applications","title":"Applications","text":"<ul> <li>PCManFM-Qt</li> <li>LXImage-Qt</li> <li>QTerminal</li> </ul>"},{"location":"Reporting-bugs/#website","title":"Website","text":"<ul> <li>lxqt-project.org</li> </ul>"},{"location":"Screensaver-and-Screen-Locker/","title":"Screensaver/Locker","text":"<p>LXQt does not provide its own screensaver or screen locker but any arbitrary screensaver/locker can be used.</p> <p>In LXQt in order to use the checkbox in LXQt Session Settings, lock actions from the leave-menu or lxqt-runner and lock actions  configured in lxqt-config-powermanagement a xdg-screensaver compliant screensaver is needed under X11.</p> <p>From LXQt 2.1 on a custom screensaver can be added in \"Session Settings\" for both X11 and Wayland sessions</p> <p><code>xdg-screensaver 1.1.3</code> supports the following screensavers:</p> <ul> <li>XScreenSaver</li> <li>Xautolock</li> <li>Gnome-screensaver</li> <li>Mate-screensaver</li> <li>Cinnamon-screensaver</li> </ul> <p>Note that the latter three will install many GTK+ dependencies.</p> <p>A list of available screen-lockers can be found here.</p>"},{"location":"Screensaver-and-Screen-Locker/#wayland","title":"Wayland","text":"<p>Available screenlockers are swaylock, hyrplock and waylock, not all compositors support all of them. Under kwin <code>loginctl lock-session</code> has to be used in \"Session Settings\" to trigger its screensaver.</p>"},{"location":"Screensaver-and-Screen-Locker/#configuration","title":"Configuration","text":"<p>Locking before suspend and hibernate can be set in  LXQt Session Settings. Sometimes configuring a delay is needed when the screen is visible for a short time after resume.</p> <p>Locking when idle or on laptop lid closure can be configured in Main menu \u2192 Settings \u2192 LXQt Settings \u2192 Power Management.</p>"},{"location":"Screensaver-and-Screen-Locker/#xscreensaver","title":"XScreenSaver","text":"<p>XScreenSaver can be configured in Main menu \u2192 Settings \u2192 Screensaver.</p>"},{"location":"Screensaver-and-Screen-Locker/#other-screenlockers-using-xautolock","title":"Other Screenlockers using Xautolock","text":"<p>Xautolock provides autolocking when idle and can be configured to use any installed screenlocker. Please refer to <code>man xautolock</code> for more details about possible configurations. Default timeout for idle is 10min.</p> <p>A basic setup consists in adding in  LXQt Session Settings under the \"Autostart\" section a command like  <code>xautolock -locker i3lock</code>.</p> <p>A custom screenlocker can be set manually in <code>~/.config/lxqt/lxqt.conf</code> in versions prior to LXQt 2.1:</p> <pre><code>[Screensaver]\nlock_command=xsecurelock\n</code></pre>"},{"location":"SettingLocale/","title":"Setting Locale","text":"<p>WARNING: The following method is tested on Arch. Please consult your distro's documentation before doing anything!</p> <p>To set the locale correctly (on Arch),</p> <ul> <li>First, make sure that the session locale is not set in another way, e.g., by a script file like <code>~/.bashrc</code>, or in <code>LXQt Session Settings \u2192 Environment</code> \u2014 because otherwise, it will interfere with the following procedure.</li> <li>Uncomment the needed locales in <code>/etc/locale.gen</code>. Example:</li> </ul> <pre><code>en_US.UTF-8 UTF-8\nen_CA.UTF-8 UTF-8\n</code></pre> <ul> <li>Run <code>sudo locale-gen</code> to generate the uncommented locales.</li> <li>Set <code>LANG</code> inside <code>/etc/locale.conf</code>. Example:</li> </ul> <pre><code>LANG=en_US.UTF-8\n</code></pre> <ul> <li>Now, create <code>~/.config/locale.conf</code> and add session tweaks to it, if any. For example, to keep <code>LANG=en_US.UTF-8</code> but to use <code>en_CA</code> for the date format, put the following lines in <code>~/.config/locale.conf</code>:</li> </ul> <pre><code>LANG=en_US.UTF-8\nLC_TIME=en_CA.UTF-8\n</code></pre> <ul> <li>Log out and log in again to see the effect. For example, with the above vaules, the date columns of PCManFM-Qt will become like this:  <code>2025-1-2 1:00\u202fp.m.</code></li> </ul> <p>It is recommended to make tweaks locally, although they can also be made globally, inside <code>/etc/locale.conf</code>.</p> <p>Some environment variables that can be tweaked in this way:</p> <pre><code>LC_NUMERIC\nLC_TIME\nLC_MONETARY\nLC_MEASUREMENT\n</code></pre>"},{"location":"SettingLocale/#note","title":"NOTE:","text":"<p>Unfortunately, GUI tools for setting locales may lead to inconsistencies and create problems, especially in non-Qt apps. The most common problems are related to messages like \"Locale not supported by C Library\" when launching a GTK app; also, XTerm may not work at all.</p> <p>The root cause of such issues is usually that a region is set in those tools without its corresponding locale being generated by <code>locale-gen</code> in the first place.</p>"},{"location":"Theming/","title":"Theming","text":""},{"location":"Theming/#lxqt-themes","title":"LXQt themes","text":"<p>LXQt themes are qss stylesheets. They are either located in <code>/usr/share/lxqt/themes/</code> or <code>~/.local/share/lxqt/themes</code>. So far the following themes are available: * Ambiance * Arch Colors * Clearlooks * Dark * Frost * KDE-Plasma * Kvantum * Leech * Light * Silver * System (plain widget theme) * Valendas</p> <p>Some discussions about themes can be followed here.  Please note that using \"System\" theme with Qt widget styles Breeze, Oxygen or Qtcurve results in uncut text in task manager buttons.</p> <p>For transparency in some themes a compositor is needed. Only Breeze, Oxygen and Kvantum widget styles support transparency in all panel menus.</p> <p>If anybody is interested in how the environment would look without a custom theme, create the following files (if \\&lt;prefix&gt; is /usr):</p> <pre><code>    mkdir /usr/share/lxqt/themes/notheme\n    touch /usr/share/lxqt/themes/notheme/lxqt-panel.qss\n</code></pre> <p>Then choose the Notheme in <code>lxqt-config-appearance</code>.</p>"},{"location":"Theming/#qt","title":"Qt","text":"<p>Theming Qt is achieved by Qt widget themes. So far the following are available: * Breeze * Oxygen * QtCurve * GTK+ * Windows * Fusion * Kvantum</p> <p>You can install Qt widget themes using your package manager. <code>Oxygen</code> widget theme can cause DND issues from mainmenu to the desktop or the \"quicklaunch\" panel widget, see lxqt-panel/issues/1750.</p>"},{"location":"Theming/#kvantum","title":"Kvantum","text":"<p>If <code>Kvantum</code> as Qt Style is selected to achieve an unique overall look the <code>System</code> theme can be selected.</p> <p>Kvantum appearance can be configured in <code>Kvantum Manager</code>.</p>"},{"location":"Theming/#theming-the-environment","title":"Theming the environment","text":"<ul> <li>Qt Palette colors can be modified in lxqt-config-appearence &gt; Widget Style &gt; Qt Palette. In themes like Frost, Dark and Light palette colors are used at some extent. In LXQt 1.0.0 and later customized palettes can be saved and loaded; they are saved in <code>~/.local/share/lxqt/palettes/</code> .</li> <li>Window decoration, titlebar and window buttons can be configured in the settings of the window manager used.</li> </ul> <p>For theming Qt5 applications some extra packages are needed, see https://github.com/lxqt/lxqt/wiki/Building-from-source#qt5-support</p> <p>For some infos about how to create a nice looking environment take a look at this Manjaro Wiki entry.</p>"},{"location":"Theming/#icons-and-artwork","title":"Icons and Artwork","text":"<p>You can find the LXQt Logo done by Caig in his repo.</p> <p>Icon sets can be installed using the package manager of the distribution. Suitable among others are * Paper, Paper-Mono-Dark * Papirus, Papirus Dark, Papirus Light * Breeze, Breeze Dark * Oxygen * Norse * Faenza, Faenza Dark * Tangerine * Tango</p>"},{"location":"Theming/#symbolic-icons","title":"Symbolic icons","text":"<p>LXQt's icon engine supports symbolic icons, which change color based on their background colors. For supporting them, <code>LXQt Appearance Configuration</code> \u2192 <code>Icon theme</code> \u2192 <code>Colorize icons based on widget style (palette)</code> should be checked.</p> <p>With symbolic icons, for having a dark panel with a light Qt widget style (or conversely),</p> <ul> <li>Either a non-symbolic icon set should be assigned to the panel, by using <code>Configure Panel</code> \u2192 <code>Styling</code> \u2192 <code>Override icon theme</code>;</li> <li>Or the Kvantum widget style should be used and a dark Kvantum theme should be assigned to the panel (so far, only Kvantum can do so).</li> </ul> <p>Otherwise, black symbolic icons might appear on a dark panel (or conversely).</p>"},{"location":"Theming/#gtk23-themes","title":"GTK2/3 Themes","text":"<p>To achieve uniformed look between Qt and  GTK applications installing corresponding gtk themes (example breeze-gtk-theme) is recommended. The GTK themes can be set in lxqt-config-appearance \u2192 Widget Style \u2192 Set GTK Themes.</p> <p>Alternatively, Kvantum comes with a few themes that simulate some GTK themes \u2014 especially, <code>KvGnome</code> and <code>KvGnomeDark</code> are very similar to the default GTK themes.</p>"},{"location":"Theming/#official-themes","title":"Official themes","text":"<p>Official themes can be found in the lxqt/lxqt-themes repository and they can be used in any LXQt version just downloading the .zip file and unzip the content of the \"themes\" directory to <code>~/.local/share/lxqt/themes/</code>.</p>"},{"location":"Theming/#community-created-themes","title":"Community created themes","text":"<p>If you create a theme and put it on GitHub it is recommended to tag it so GitHub creates a release for it once you are finished. Like this users can see what changes you did in a later version and the chances of your theme being added to a distribution are higher.</p> <ul> <li>LXQt-Breeze by @Mahe</li> <li>lush by @Val67</li> <li>openSUSE-default by @jubalh</li> <li>openSUSE-leaper by @jubalh</li> <li>openSUSE-light by @jubalh</li> <li>QTStep by abgr</li> <li>QTStep Gradient by abgr</li> <li>Debian/Ubuntu themes by @agaida and @tsimonq</li> <li>arc dark by Gabriel Ib\u00e1\u00f1ez</li> <li>Materia by Gabriel Ib\u00e1\u00f1ez</li> <li>win-eleven-dark + sombre-et-rond by Baptiste Huchon</li> </ul> <p>Some of them can be found in the opendesktop.org category LXQt Themes.</p>"},{"location":"Theming/#fix-for-invisible-text-in-kde-plasma-systemsettings-with-dark-themes","title":"Fix for invisible text in KDE Plasma Systemsettings with dark themes","text":"<p>Choose both dark theme and color scheme in Plasma Settings and add <code>QT_QUICK_CONTROLS_STYLE=org.kde.desktop</code> in Session Configuration &gt; Advanced:</p> <p></p>"},{"location":"Theming/#press","title":"Press","text":"<p>pcsuggest has an article about LXQt themes which also mentions a few other ones.</p>"},{"location":"Third-party-apps/","title":"Third-party Apps","text":"<p>Once you've got LXQt running you may want to look for additional software complementing the desktop environment, in particular if you're new to LXQt, Qt desktop environments or even Linux altogether. So here's an overview what you may want to have a look at.  More comprehensive lists of apps can e. g. be found in the wikis of Linux distributions Arch Linux, Manjaro or Gentoo.   </p>"},{"location":"Third-party-apps/#display-managers","title":"Display managers","text":"<p>The display manager recommended to be used with LXQt are SDDM or greetd but any other display manager like GDM or LightDM is working, too.</p>"},{"location":"Third-party-apps/#complementary-tools-geared-towards-lxqt","title":"Complementary tools geared towards LXQt","text":"<p>A number of complementary tools exist providing features not included in the desktop environment itself (yet).   </p>"},{"location":"Third-party-apps/#ui","title":"UI","text":""},{"location":"Third-party-apps/#crystal-dock","title":"Crystal Dock","text":"<p>A dock for Wayland and X11, completely integrated with LXQt.</p>"},{"location":"Third-party-apps/#lxqt-panel-profiles","title":"lxqt-panel-profiles","text":"<p>Backup and restore different panel configurations.</p>"},{"location":"Third-party-apps/#sddm-conf","title":"sddm-conf","text":"<p>GUI for editing SDDM configuration.</p>"},{"location":"Third-party-apps/#networking","title":"Networking","text":""},{"location":"Third-party-apps/#cmst-qt-gui-for-connman","title":"cmst - QT GUI for Connman","text":"<p>Cmst provides a graphical user interface to control the connman daemon, including a tray icon.</p>"},{"location":"Third-party-apps/#nm-tray","title":"nm-tray","text":"<p>Panel plugin (widget) to control NetworkManager, unlike its preexisting counterparts written in Qt.</p>"},{"location":"Third-party-apps/#applications","title":"Applications","text":"<ul> <li>audacious  - Advanced audio player</li> <li>copyQ      - Advanced clipboard manager</li> <li>FeatherPad - Text editor with many features</li> <li>gvfs       - Trash support, mounting with udisks and remote filesystems for PCManFm-Qt</li> <li>meteo-qt   - Weather status information</li> <li>nomacs     - Image viewer</li> <li>Qarma      - Qt utility for displaying dialog boxes from shell scripts or command line.</li> <li>Qbittorrent - Torrent client</li> <li>QDirStat   - Qt-based directory statistics. KDirStat without any KDE.</li> <li>Qtilities  - Qt Utilities collection</li> <li>Qlipper    - Clipboard management. </li> <li>Qpdfview     - Pfd and document viewer</li> <li>Quassel    - Distributed IRC client</li> <li>QVKbd      - virtual keyboard written in Qt.</li> <li>Strawberry - Music Player</li> <li>Trojita    - IMAP e-mail client</li> <li>vokoscreen - Screencast creator</li> <li>Wallutils  - Wallpaper daemon</li> </ul>"},{"location":"Translation/","title":"Translation","text":""},{"location":"Translation/#overview","title":"Overview","text":"<p>The LXQt Project uses again an Weblate instance for translations,  including desktop files. Potential translators should choose Weblate as the preferred translation tool.</p> <p>Local translations using QtLinguist are possible downloading and uploading *.ts files using the Weblate platform. </p> <p>Direct Pull Requests to Github for *.ts files are still possible but not recommended as they can lead to merge conflicts.</p>"},{"location":"Translation/#general-approach","title":"General approach","text":"<p>Create an account on translate.lxqt-project.org or login with your existing Github, Ubuntu, Fedora or OpenSuse account. It is also possible to add suggestions for strings without having any account. The LXQt Project is split up in 3 groups:</p> <ul> <li>LXQt-Desktop: Contains applications and main components.</li> <li>LXQt-Configuration: Groups all configuration settings.</li> <li>LXQt-Panel: Translations for the panel and its plugins.</li> </ul> <p>There can be selected watched projects, preferred languages, email notifications and else in the account's profile settings.  Please note that for adding language files that are not already present contacting  administrators is needed.</p>"},{"location":"Translation/#desktop-entry-files","title":"Desktop Entry Files","text":"<p>Those are comprised in distinct components' repositories like the one of PCManFM-Qt where they reside in a folder \"translations\". Translations are handled by snippets like pcmanfm-qt_de.desktop.yaml comprising nothing but the respective translation.  All of the <code>*.desktop.yaml</code> files are now handled in LXQt Weblate (\"Menu Entry\").</p> <ul> <li><code>Name=</code>: Name displayed in the menu, runner and pcmanfm-qt/applications</li> <li><code>GenericName</code>: Tooltip in the menu, explanation in runner</li> <li><code>Comment</code>: is used as tooltip only if  <code>GenericName=</code>   and <code>GenericName[xy]=</code> are both absent in <code>/usr/share/applications/foo.desktop</code>.</li> </ul> <p>It is still possible to edit desktop entry files forking the repository, using an text editor and making a Pull Request but it is not recommended.</p>"},{"location":"Translation/#panel-desktop-entry-files","title":"Panel Desktop Entry Files","text":"<p>The names and descriptions of the panel plugins  are *.desktop.yaml files  in <code>/lxqt/lxqt-panel/plugin-foo/translations/</code>.</p> <p>Translations for menu categories are *.directory.yaml files in https://github.com/lxqt/lxqt-menu-data/tree/master/menu/translations, also on Weblate.</p>"},{"location":"Translation/#credits","title":"Credits","text":"<p>Credits for translations (displayed in LXQt-About) can be inserted in lxqt/lxqt-about/tree/master/translatorsinfo/translators_XY.info by forking the and making a PR.</p>"},{"location":"Translation/#language-vs-country-specific-translations","title":"Language vs. country specific translations","text":"<p>The Qt translation framework allows for distinguishing language from country specific translations which does have some implications that should get considered by translators.</p>"},{"location":"Translation/#glossary","title":"Glossary","text":"<p>Language specific translations are meant to cover a language independently from a particular country. Corresponding files feature a single double-digit lower-case code referring to the language only like \"pt\" in <code>lxqt-panel_pt.ts</code> for Portuguese.  Country specific translations are meant to address a language variant that's spoken in a particular country only. Corresponding files feature an additional double-digit code in capital letters referring to a particular country like \"BR\" in <code>lxqt-panel_pt_BR.ts</code> for Brazil.   </p> <p>Either way the code(s) have to be reflected in the TS files' headers as well like  <code>&lt;TS version=\"2.1\" language=\"pt\"&gt;</code>.  or  <code>&lt;TS version=\"2.1\" language=\"pt_BR\"&gt;</code>  This can get handled by Qt Linguist, too (menu <code>Edit</code> - <code>Translation File Settings</code>).</p>"},{"location":"Translation/#need-for-country-specific-translations","title":"Need for country specific translations","text":"<p>Frequently these aren't needed at all. E. g. German gets spoken in several countries and plenty of differences exist. But these do not affect the technical terms used by LXQt in any way.  In Portuguese many of the technical terms used by LXQt are different in Brazil or Portugal, though. Corresponding country specific variants are hence needed.</p> <p>So first of all a translator should think about the need of country specific translations. Questions can be asked in [Discussions[(https://github.com/lxqt/lxqt/discussions) and so be discussed with other native speakers.  If country specific translations aren't needed a single language specific translation like <code>de</code> will do (and the next paragraph doesn't matter any longer).</p>"},{"location":"Translation/#country-specific-translations-vs-system-locale","title":"Country specific translations vs. system locale","text":"<p>The locale used by a running system as indicated by the output of <code>$ locale</code> on Linux will be country specific most of the time like in this example</p> <pre><code>$ locale \nLANG=de_DE.UTF-8\nLC_CTYPE=\"de_DE.UTF-8\"\nLC_NUMERIC=\"de_DE.UTF-8\"\n[...]\n</code></pre> <p>Note the string <code>de_*DE*</code>. The encoding, usually <code>UTF-8</code> nowadays, frequently <code>ISO-8859-1</code> earlier, doesn't matter in this context.</p> <p>It is important to note that country specific translations are only used when a system's locale is set to the same country.  E. g. a Portuguese translation <code>pt_BR</code> is only used when a running system's locale is <code>pt_BR</code>, too. This translation does not get used if the system's locale is <code>pt_PT</code> (Portugal).  This means that no Portuguese translation is used at all should a system's locale be set to <code>pt_PT</code> and <code>pt_BR</code> be the only Portuguese translation that's available.</p> <p>Language specific files will always be used as fallback.  E. g. if two translations <code>pt_BR</code> and <code>pt</code> are available and a system's locale is set to <code>pt_PT</code> translation <code>pt</code> will be used.</p> <p>As a consequence a country agnostic translation like <code>pt</code> should be provided even if country specific translations are basically needed as long as not all of them are available yet.  This should be done in order to have a fallback as depicted above. It's still better to use a translation that eventually doesn't fit the country of a running system's locale than no translation at all resulting in an English GUI.</p>"},{"location":"Translation/#resolving-weblate-rebase-failures","title":"Resolving Weblate rebase failures","text":"<p>For most LXQt repositories on GitHub, a webhook is configured so that the Weblate server receives notifications about new commits of a repository from GitHub. Weblate will rebase local commits on top of the latest upstream (GitHub) commit.</p> <p>However, from time to time, rebase failed for various reasons. Rebase failures can be fixed by logging onto the server via SSH and fix commits with the <code>git</code> command. The Weblate documentation also mentions the <code>wlc</code> command line tool, but I haven't not tried it out yet.</p> <p>Here are steps about fixing failures via SSH:</p> <ol> <li><code>ssh weblate@translate.lxqt-project.org</code> (ask stefonarch or yan12125 for SSH access)</li> <li><code>cd data/vcs/&lt;git path&gt;</code>.     Here the git path can be checked from the Repository containing Weblate translations field on the Repository Maintenance page on the Weblate website.     For example, on https://translate.lxqt-project.org/projects/lxqt-configuration/lxqt-admin-user-menu-entry/#repository, it is shown that the git path is <code>lxqt-configuration/lxqt-admin-user</code>.     Note that for linked components, the git path can be different from the URL.</li> <li>Resolve rebase failures (needs more explanation)</li> <li>Hit the Rebase button on the Repository Maintenance page, and the Weblate component (as long as linked ones) will be unlocked.</li> </ol>"},{"location":"Translation/#refresh-the-github-token-for-weblate","title":"Refresh the GitHub token for Weblate","text":"<ol> <li>Login to LXQtBot GitHub account and regenerate a token</li> <li>Update <code>GITHUB_TOKEN =</code> line in <code>~/settings.py</code> and <code>oauth_token:</code> line in <code>~/.config/hub</code></li> <li>Restart the Weblate service by <code>sudo systemctl reload celery-weblate.service</code></li> </ol>"},{"location":"Wayland-Session/","title":"Wayland Settings","text":"<p>For an overall Wayland support, LXQt 2.1.0 or later is required, while most components already support Wayland in V2.0.x. To start a LXQt Wayland Session select \"LXQt (Wayland)\" in your display manager. From tty the session can be started with <code>startlxqtwayland</code>.</p> <p>lxqt-wayland-session has to be installed for enabling \"Wayland Settings\" in \"Session Settings\". The panel can choose a specific backend for each compositor to enable workspace switcher, other workspace related menu-items, and more. In LXQt 2.2 the available backends are X11 (xcb), a general one for wlroots-compatible compositors, and another for kwin_wayland.</p>"},{"location":"Wayland-Session/#compositors","title":"Compositors","text":"<p>The compositor can be chosen in \"Session Settings\" under \"Wayland Settings\". The supported stacking compositors are labwc, Wayfire and kwin_wayland, while the tiling ones are Hyprland, Niri, River and Sway. For a working taskbar the compositor should support <code>wlr-foreign-toplevel-management-unstable-v1</code> protocol. For starting an LXQt session under other compositors, the command <code>lxqt-session &amp;&amp; &lt;logout_command&gt;</code> has to be added in the autostart setting of the compositor.</p> <p>For the supported compositors, minimal default settings based on their default settings are shipped and will be installed in <code>~/.config/lxqt/wayland/</code> folder at the first start, except for <code>kwin_wayland</code> and labwc, where the default configurations are used. GUI configuration tools are available for labwc (labwc-tweaks), Wayfire (wcm) and kwin (Plasma's <code>systemsettings</code>, menu entries customized for LXQt can be installed from here.</p> Type Gui config Animations/Effects Titlebar Menu Config File Magnifier Notes/Issues Hyprland Tile - yes - custom yes --- labwc Stack partial Shadows only Custom xml yes Kwin Stack yes yes Default ini yes Kwin has its own lock settings, consider disabling it. Niri Tile - yes - kdl - --- River Tile - - - script - Taskbar cannot activate windows on other tags Sway Tile - - - custom/sh - runner broken Wayfire Stack yes yes - ini yes <p>Consider disabling the shortcut for exiting the compositor to avoid accidental killing of the session.</p>"},{"location":"Wayland-Session/#disabled-components","title":"Disabled Components","text":"<p>Some components cannot be used under Wayland, and an information dialog will be shown if they are launched there. This includes \"Shortcut Keys\", power key settings in \"Power Management\", and \"Monitor Settings\" which works only under kwin_wayland. Instead in \"Keyboard and Mouse\" some settings are not present -all those settings are handled directly by the compositor now and can be configured in its settings. Some panel widgets are not supported at all (Keyboard State) or not on every compositor (Desktop Switcher, Show Desktop), depending on whether there is a dedicated backend available or not. Some right click menu-items of task-bar buttons are grayed out if unavailable.</p> <p>ScreenGrab 3.0 has support for Wayland.</p>"},{"location":"Wayland-Session/#lxqt-panels-wayland-backends","title":"LXQt Panel's Wayland Backends","text":"<p>As of May 2025, two Wayland backends are available: kwin_wayland and one for wlroots-compatible compositors, which will be automatically detected for all seven supported compositors.</p> <p>For special cases the backend to load can be forced manually for any desktop specified in <code>XDG_CURRENT_DESKTOP</code> by a comma-separated list in <code>~/.config/lxqt/panel.conf</code>:</p> <pre><code>[General]\n\u2026\npreferred_backend=labwc:wlroots, niri:wlroots, xyz:my_own_backend\n\u2026\n</code></pre>"},{"location":"Wayland-Session/#screen-lockers","title":"Screen Lockers","text":"<p>Supported/tested screenlockers are <code>swaylock</code>, <code>waylock</code> and <code>hyprlock</code>. On kwin_wayland <code>loginctl lock-session</code> has to be set in the mask. Other Wayland screenlockers may work as well.</p>"},{"location":"Wayland-Session/#global-shortcuts","title":"Global Shortcuts","text":"<p>Shortcuts are handled exclusively by the compositor. Because of that, applications launched by such shortcuts might not exit decently on logging out if they are running before the session ends. That might result in unsaved settings on logging out. The reason is that their processes are not controlled by LXQt Session.</p> <p>As a workaround, you can use shortcuts that launch applications through lxqt-session's D-BUS interface (with lxqt-session \u2265 2.2.0 or git), which makes them exit gracefully when the session ends. An example for labwc:</p> <p>Instead of</p> <pre><code>&lt;action name=\"Execute\" command=\"featherpad\"/&gt;\n</code></pre> <p>Use</p> <pre><code>&lt;action name=\"Execute\" command=\"qdbus6 org.lxqt.session /LXQtSession execDesktopFile featherpad.desktop\"/&gt;\n</code></pre> <p>It is longer but safer.</p> <p>The names of desktop files can be found in <code>/usr/share/applications/</code>. The general command is</p> <pre><code>qdbus6 org.lxqt.session /LXQtSession execDesktopFile DESKTOP_FILE_NAME_OR_PATH\n</code></pre> <p>Also, a desktop file can be made for any executable file, and its full path can be used in a command like above. But, for a desktop file inside <code>$XDG_DATA_DIRS/applications/</code>, the file name is enough.</p>"},{"location":"Wayland-Session/#global-scaling","title":"Global Scaling","text":"<p>The global screen scaling of \"LXQt Session Settings\" is only for X11 and should not be used on Wayland. Wayland supports per-monitor scaling, and best results can be achieved in the settings of the compositor, if existing. Examples:</p> <p>Hyprland: <code>monitor=,preferred,auto,1.2</code></p> <p>Sway: <code>Output eDP-1 scale 1.2</code></p> <p>With all compositors that support <code>wlr-output-management protocol</code>, kanshi or shikane can be configured. With kwin_wayland, KDE's <code>systemsettings</code> is the best tool.</p>"},{"location":"Wayland-Session/#brightness-volume-multimedia-keys-xf86-","title":"Brightness, Volume, Multimedia Keys (XF86-*)","text":"<p>Please check your compositor configuration if some of them aren't working. Sway, for example, uses <code>pactl</code> (part of libpulse) for volume, while labwc and Wayfire use <code>pamixer</code> by default, which may not be present in your installation.</p>"},{"location":"Wayland-Session/#third-party-tools-mostly-for-wlroots-not-kwin_wayland","title":"Third party tools (mostly for wlroots, not kwin_wayland)","text":"<ul> <li><code>swayidle</code> Screen blanking/monitor off in combination with <code>wlopm</code></li> <li><code>swaybg</code> Background below desktop (splash)</li> <li><code>lswt</code> list Wayland toplevels (windows), useful for window rules</li> <li><code>wlrctl</code> Command line utility for miscellaneous wlroots extensions</li> <li><code>wlopm</code> Turn off monitor(s)</li> <li><code>wtype</code> Sending keystrokes (p.e. in custom command plugin or shortcuts)</li> <li><code>kanshi</code> Monitor settings</li> <li><code>wdisplay</code> Monitor settings on the fly</li> <li><code>copyQ</code> Clipboard manager; works fine under kwin_wayland as well as wlroots</li> <li><code>wvkbd</code> Virtual keyboard</li> <li><code>wev</code> List keypress and mouse events</li> <li><code>grim</code> and <code>slurp</code> Screenshot</li> <li><code>wf-recorder</code> Screencast</li> <li><code>wshot</code> GUI for screenshots</li> </ul>"},{"location":"Wayland-Session/#issues-tips-and-tricks","title":"Issues, Tips and Tricks","text":""},{"location":"Wayland-Session/#tooltips-and-popups-qt-bugs","title":"Tooltips and popups (Qt bugs)","text":"<ul> <li>On bottom and right panels some tooltips and some popups align to screen border.</li> </ul> <p>See https://github.com/lxqt/lxqt-panel/issues/2092 for status.</p>"},{"location":"Wayland-Session/#generic-icons-in-taskbar","title":"Generic Icons in Taskbar","text":"<p>Check \"Use icons by window class\" in taskbar settings.</p>"},{"location":"Wayland-Session/#desktop-icons-under-the-panel","title":"Desktop icons under the panel","text":"<p>Read https://github.com/lxqt/pcmanfm-qt/wiki#using-desktop-under-wayland</p>"},{"location":"Wayland-Session/#forcing-use-of-wayland","title":"Forcing use of Wayland","text":"<ul> <li>Element (electron): <code>.config/electron-flags.conf</code>:</li> </ul> <pre><code>--enable-features=UseOzonePlatform\n--ozone-platform=wayland\n</code></pre> <ul> <li>Darktable:<code>GDK_BACKEND=wayland darktable</code> (can be added in the <code>.desktop</code> file)</li> </ul>"},{"location":"Wayland-Session/#turning-off-monitor-when-idle-with-kwin-niri-and-others","title":"Turning off monitor when idle with KWin, Niri and others","text":"<p>LXQt's power manager settings for turning off the monitor will work fine if you use the config dialog of its latest version or manually add a line to <code>~/.config/lxqt/power.conf</code>: * kwin</p> <p>Make sure you have <code>kscreen-doctor</code>. It is provided by <code>libkscreen</code> in Arch.</p> <pre><code>monitorOffCommand_wayland=kscreen-doctor --dpms off\n</code></pre> <ul> <li>Niri</li> </ul> <pre><code>monitorOffCommand_wayland=niri msg action power-off-monitors\n</code></pre> <ul> <li>Hyprland</li> </ul> <pre><code>monitorOffCommand_wayland=hyprctl dispatch dpms off\n</code></pre> <p>To wake up all monitors it needs in <code>lxqt-hyprland.conf</code> under \"misc\":</p> <pre><code>misc {\n    ...\n    mouse_move_enables_dpms=true\n    key_press_enables_dpms=true\n}\n</code></pre> <ul> <li>Labwc, others</li> </ul> <p>Make sure <code>wlopm</code> is installed; works only for an external monitor. Use <code>wlopm</code> to get the monitor name. Examples:</p> <pre><code>monitorOffCommand_wayland=wlopm --off HDMI-A-1\nmonitorOffCommand_wayland=wlopm --off \"*\"\n</code></pre> <p>A tool which apparently works with all screens is https://github.com/lilydjwg/dpms-off, but it needs more tests by more users.</p> <p>The other actions of the LXQt idleness watcher work in all supported compositors, but this action only works with the above commands for now, and you can control it in the right-click menu of the battery tray icon, as in X11. Use <code>swayidle</code> or  <code>hypridle</code> with other compositors.</p>"},{"location":"Wayland-Session/#3-finger-swipe-to-switch-workspace-also-in-other-compositors-as-kwin-and-hyprland","title":"3-finger-swipe to switch workspace also in other compositors as kwin and Hyprland.","text":"<p><code>~/.config/libinput-gestures.conf</code> :</p> <pre><code># Add this to auto-start in compositor: libinput-gestures-setup start\n# https://github.com/bulletmark/libinput-gestures\n\n# sway\ngesture: swipe left 3   swaymsg -t command workspace next_on_output\ngesture: swipe right 3  swaymsg -t command workspace prev_on_output\n\n# labwc (with C-A-right configured in rc.xml)\ngesture: swipe left 3   wtype  -M ctrl -M alt -P right\ngesture: swipe right 3 wtype  -M ctrl -M alt -P left\n\n</code></pre>"},{"location":"Wayland-Session/#screenshot-shortcuts-examples-with-grimslurp","title":"Screenshot shortcuts examples with grim/slurp","text":"<p>Save to executable files <code>screenshot_full</code> and <code>screenshot_area</code> and set shortcuts like Alt+Print/Ctrl+Print.</p> <pre><code>grim /tmp/screen_full_$(date +'%a_%T_.png') &amp;&amp;\n notify-send -a grim -i screengrab -t 2000 \"Full screenshot saved\"\nlximage-qt /tmp/screen_full_$(date +'%a_%T_.png')\n</code></pre> <pre><code>grim -g \"$(slurp -d)\" - | wl-copy -t image/png &amp;&amp; notify-send -a grim -i screengrab -t 2000 \"Screenshot saved to clipboard\"\n</code></pre>"},{"location":"Wayland-Session/#action-icons-in-the-panel","title":"Action icons in the panel","text":"<p>Custom command plugin can trigger actions for which shortcuts are configured, using <code>wtype</code>. Example: Go to workspace right|left.</p>"},{"location":"Wayland-Session/#display-keyboard-layout-in-panel-2-layouts-only","title":"Display keyboard layout in panel (2 layouts only)","text":"<p>Add to XKB_DEFAULT_OPTIONS: <code>grp_led:scroll</code>, example labwc: <code>XKB_DEFAULT_OPTIONS=grp:caps_toggle,grp_led:scroll</code></p> <p>Add <code>if [ \"$(cat /sys/class/leds/input3\\:\\:scrolllock/brightness)\" == \"1\" ]; then echo \"US\";else echo \"DE\"; fi</code> as command. Repeat every second. <code>/sys/class/leds/input3</code> can be different on different OS.</p>"},{"location":"Wayland-Session/#running-sddm-under-wayland","title":"Running SDDM under Wayland","text":"<p><code>/etc/sddm.conf</code></p> <pre><code>[General]\n...\nDisplayServer=wayland\n\n\n[Wayland]\n...\nSessionLogFile=/tmp/wayland-session.log\nCompositorCommand=labwc\n</code></pre> <p>SDDM uses <code>/var/lib/sddm/</code> as home directory where the compositor should be configured, otherwise default settings will be applied:</p> <p><code>/var/lib/sddm/.config/labwc/rc.xml</code></p> <pre><code>&lt;?xml version=\"1.0\"?&gt;\n&lt;labwc_config&gt;\n\n&lt;keyboard&gt;\n    &lt;keybind key=\"A-Space\"&gt;\n      &lt;action name=\"ShowMenu\" menu=\"client-menu\" /&gt;\n    &lt;/keybind&gt;\n    &lt;keybind key=\"A-k\"&gt;\n      &lt;action name=\"Execute\"&gt;\n        &lt;command&gt;wvkbd-mobintl&lt;/command&gt;\n      &lt;/action&gt;\n    &lt;/keybind&gt;\n&lt;/keyboard&gt;\n\n  &lt;mouse&gt;\n    &lt;default /&gt;\n  &lt;/mouse&gt;\n  &lt;libinput&gt;\n    &lt;device category=\"default\"&gt;\n      &lt;naturalScroll&gt;no&lt;/naturalScroll&gt;\n      &lt;pointerSpeed&gt;0.8&lt;/pointerSpeed&gt;\n      &lt;accelProfile&gt;adaptive&lt;/accelProfile&gt;\n      &lt;tap&gt;yes&lt;/tap&gt;\n      &lt;disableWhileTyping&gt;yes&lt;/disableWhileTyping&gt;\n    &lt;/device&gt;\n  &lt;/libinput&gt;\n&lt;/labwc_config&gt;\n</code></pre>"},{"location":"Window-managers-%28X11%29/","title":"Window Managers","text":"<p>LXQt does not provide its own window manager but any arbitrary window manager can be used, most notably Openbox, KWin (the window manager of KDE), and Xfwm4 (the window manager of Xfce).   </p> <p>The current window manager is stored in section <code>[General]</code> of file <code>session.conf</code>.</p> <pre><code>[General]\n[...]\nwindow_manager=xfwm4\n[...]\n</code></pre> <p>It can be chosen in configuration dialogue LXQt Session Settings of lxqt-session.</p>"},{"location":"Window-managers-%28X11%29/#known-window-managers","title":"Known Window Managers","text":"<p>Listed in <code>/usr/share/lxqt/windowmanagers.conf</code> shipped by LXQt Session and if installed are shown in Session Settings &gt; Window Manager. Window manager not listed can be set by their path.</p>"},{"location":"Window-managers-%28X11%29/#keyboard-shortcuts","title":"Keyboard Shortcuts","text":"<p>Window manager related shortcuts (raise/lower, maximize/minimize, desktop and window switching and else) are handled by their configuration and not by lxqt-globalkeys. Therefore conflicts are possible, some of them will be notified at session startup. Avoiding identical shortcuts is recommended.</p> <p>[!NOTE] Assigning Super_L (\"Windows\" or \"Meta\" key) for opening the main menu in the panel or switching keyboard layout may conflict eventually with the use of this key as a modifier, disabling eventually some of the default keybindings in the window manager in use.</p>"},{"location":"Window-managers-%28X11%29/#compositor","title":"Compositor","text":"<p>For desktop effects, shadows, transparency and else a compositor has to be enabled. Kwin and Xfwm4 provide their own compositor, for openbox or other Window Managers 'picom' can be used.</p> <p>A configuration tool for picom is: picom.conf.</p>"},{"location":"Window-managers-%28X11%29/#openbox","title":"Openbox","text":"<p>Configuration is handled by a configuration file rc.xml, the user specific copy of which is normally found in <code>~/.config/openbox/</code>.   </p> <p>[!NOTE]  Prior to version 0.17 LXQt was using a specific copy of this file<code>~/.config/openbox/lxqt-rc.xml</code> and the project is maintaining a GUI ObConf-Qt to edit this file. Users using openbox and upgrading to version 0.17 can copy the deprecated file to <code>~/.config/openbox/rc.xml</code> in order to preserve their customization. </p>"},{"location":"Window-managers-%28X11%29/#shortcuts","title":"Shortcuts","text":"<p>Keyboard shortcuts can only be changed, added or removed editing directly <code>~/.config/openbox/rc.xml</code></p>"},{"location":"Window-managers-%28X11%29/#kwin","title":"KWin","text":"<p>The KWin configuration is stored in <code>~/.config/kwinrc</code>. Note that the KDE Plasma concepts for window management differ from Xorg de-facto standard concepts. Therefore the integration with LXQt is not always straight forward.</p> <p>The only GUI to configure KWin in LXQt sessions is KDE's System Settings. Unfortunately this represents a drawback of using KWin as part of KDE Plasma is needed to get this to work reasonably in LXQt sessions. A minimal working setup to configure KWin can be achieved by installing <code>systemsettings kitemmodels plasma-workspace</code>.</p> <p>An essential custom menu entry for kwin can be installed from here.</p>"},{"location":"Window-managers-%28X11%29/#shortcuts_1","title":"Shortcuts","text":"<p>KDE stores keyboard shortcuts in the <code>~/.config/kglobalshortcutsrc</code> configuration file. The GUI can be installed separately, but requires the complete <code>plasma-desktop</code> package.</p> <p>[!NOTE] Kwin version 6.*  does not start <code>kglobalacceld</code> automatically anymore, adding  <code>/usr/lib/kglobalacceld</code> in LXQt <code>Session Settings &gt; Autostart</code> is needed.</p>"},{"location":"Window-managers-%28X11%29/#issues","title":"Issues","text":""},{"location":"Window-managers-%28X11%29/#show-desktop","title":"Show Desktop","text":"<p>KWin does not distinguish PcManFm-Qt windows from the desktop which is drawn by PcManFm-Qt. Eventually open file manager windows will therefore not be minimized but only blurred. To have \"Show Desktop\" fully working following steps are necessary: * In <code>lxqt-globalshortcuts</code> \"Show Desktop\" keybinding is disabled * No \"Show Desktop\" plugin on any panel * In KDE Systemsettings &gt; Window Managment &gt; KWin Scripts \"MinimizeAll\" is activated * In KDE Systemsettings &gt; Shortcuts searching for \"MinimizeAll\" a shortcut is set</p> <p><code>~/.config/kglobalshortcutsrc</code></p> <pre><code>...\nMinimizeAll=Alt+D,none,MinimizeAll\n...\n\n</code></pre> <p>With <code>xdotool</code> a \"Show Desktop\" button on the panel can be created by adding the \"Custom Command\" plugin, set <code>xdotool key \"alt+d\"</code> (if shortcut is Alt D) as left click command, icon <code>desktop.svg</code> and unset all other settings.</p>"},{"location":"Window-managers-%28X11%29/#font-of-titlebar","title":"Font of titlebar","text":"<p>The settings in <code>~/.config/kdeglobals</code> are not respected outside of Plasma. The only way to change the titlebar font is using breeze-enhanced instead of breeze in KDE settings.</p>"},{"location":"Window-managers-%28X11%29/#xfwm4","title":"Xfwm4","text":"<p>Three tools are provided to configure this window manager.  * Window Manager: Basic settings. Binary <code>xfwm4-settings</code>, desktop entry file <code>xfce-wm-settings.desktop</code>. * Window Manager Tweaks: Additional / advanced settings. Binary <code>xfwm4-tweaks-settings</code>, desktop entry file <code>xfce-wmtweaks-settings.desktop</code>. * Workspaces: Configures the virtual desktops. Binary <code>xfwm4-workspace-settings</code>, desktop entry file <code>xfce-workspaces-settings.desktop</code>.</p> <p>[!NOTE] All desktop entry files mentioned above have by default key <code>OnlyShowIn=XFCE;</code> and will thus not be visible in LXQt sessions including the panel's main menu. In order to use these desktop entry files in LXQt sessions remove this line either in the system copy of the files, normally in <code>/usr/share/applications/</code>, or in a user specific copy which has to be placed in <code>~/.local/share/applications/</code> most of the time. The latter is the preferred solution as it won't be overwritten by updates:  ```  mkdir ~/.local/share/applications  cp /usr/share/applications/xfce-w* ~/.local/share/applications</p> <p>Those files ready for use can be installed from here. ```</p>"},{"location":"Window-managers-%28X11%29/#shortcuts_2","title":"Shortcuts","text":"<p>Shortcuts can be modified in Preferences &gt; Window Manager &gt;  Keyboard , binary <code>xfwm4-settings</code>.</p>"},{"location":"Window-managers-%28X11%29/#other-window-manager","title":"Other Window Manager","text":"<p>A comprehensive list can be found in the Arch Wiki.</p>"},{"location":"_Sidebar/","title":"Introduction","text":"<p>[[History]]  [[Contact]]   </p>"},{"location":"_Sidebar/#installation","title":"Installation","text":"<p>[[Binary packages|Binary-packages]]  [[Building from source|Building-from-source]]  [[Third party apps|Third-party-apps]]   </p>"},{"location":"_Sidebar/#configuration","title":"Configuration","text":"<p>[[General|General]]  [[Launching LXQt sessions|Launching-LXQt-sessions]]  [[Window Managers (X11)|Window-managers-(X11)]]  [[Wayland Session|Wayland-Session]] [[Screensavers/Lockers|Screensaver-and-Screen-Locker]] [[Setting Locale|SettingLocale]]  [[Miscellaneous|Miscellaneous]]  [[Theming|Theming]]  PCManFm-Qt</p>"},{"location":"_Sidebar/#development","title":"Development","text":"<p>[[Reporting bugs|Reporting-bugs]]  [[Translation]]  [[Contributing code|Contributing-code]]  [[Maintaining a good new dev experience|Maintaining-a-good-new-dev-experience]]     [[TODO for Wayland|TODO-for-Wayland]]  [[Infrastructure Fellows|Infrastructure-Fellows]]   </p>"},{"location":"_Sidebar/#release-process","title":"Release process","text":"<p>[[How To Release A New Version of LXQt]]</p>"}]}